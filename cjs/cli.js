"use strict";var e;Object.defineProperty(exports,"__esModule",{value:!0}),!function(e,r){for(var t in r)Object.defineProperty(e,t,{enumerable:!0,get:r[t]})}(exports,{PLATFORM:function(){return c},TEMPLATES_ROOT:function(){return i},del:function(){return f},exe:function(){return p},exec:function(){return l},execOptions:function(){return s},getCurrentDir:function(){return a},getParentDir:function(){return u},initApp:function(){return $},removeApp:function(){return m},tree:function(){return y},unzip:function(){return g},zip:function(){return x}});const r=require("child_process"),t=(e=require("path"))&&e.__esModule?e:{default:e},n=require("./builtin.js"),o=require("./git.js"),i=`${process.env.DEV_CONFIG_ROOT}/Templates`??"C:/JnJ-soft/Developments/Templates",c="win32"===process.platform?"win":"darwin"===process.platform?"mac":"linux"===process.platform?"linux":process.platform,s={encoding:"utf8",shell:"win32"===process.platform?"cmd.exe /d /s /c chcp 65001>nul &&":"/bin/sh"},l=e=>{let t=(0,r.execSync)(e,{encoding:"utf8"});return t?t.toString().trim():""},p=e=>{let r=[];return e.forEach(e=>r.push(l(e))),r},a=()=>"win"===c?(0,r.execSync)("cd",s).toString().trim().replace(/\\/g,"/"):(0,r.execSync)("pwd",s).toString().trim(),u=()=>"win"===c?t.default.dirname((0,r.execSync)("cd",s).toString().trim().replace(/\\/g,"/")):t.default.dirname((0,r.execSync)("pwd",s).toString().trim()),d=e=>{let t=(0,o.findGithubAccount)(e.userName??""),l=u(),p=a(),d="";d="win"===c?`xcopy "${i}\\ts-swc-npm" "${e.repoName}\\" /E /I /H /Y`:`cp -r ${i}/ts-swc-npm ${e.repoName}`,(0,r.execSync)(d,s),(0,n.substituteInFile)(`${e.repoName}/package.json`,{"{{name}}":e.repoName??"","{{author}}":`${t.fullName} <${t.email}>`,"{{description}}":e.description??""}),(0,n.substituteInFile)(`${e.repoName}/README.md`,{"{{name}}":e.repoName??"","{{project-name}}":e.repoName??"","{{author}}":`${t.fullName} <${t.email}>`,"{{github-id}}":e.userName??"","{{description}}":e.description||"","{{parent-dir}}":l,"{{current-dir}}":p}),(0,n.substituteInFile)(`${e.repoName}/docs/workflow.md`,{"{{name}}":e.repoName??"","{{project-name}}":e.repoName??"","{{github-id}}":e.userName??"","{{description}}":e.description||"","{{parent-dir}}":l,"{{current-dir}}":p}),console.log(d=`cd ${p}/${e.repoName} && npm install`),(0,r.execSync)(d,s),console.log(d=`cd ${p}/${e.repoName} && xgit -e makeRepo -u ${e.userName} -n ${e.repoName} -d "${e.description}"`),(0,r.execSync)(d,s)},m=e=>{(0,r.execSync)(`xgit -e deleteRemoteRepo -u ${e.userName} -n ${e.repoName}`,s),"win"===c?(0,r.execSync)(`rmdir /s /q ${e.repoName}`,s):(0,r.execSync)(`rm -rf ${e.repoName}`,s)},$=e=>{switch(e.template){case"node-simple":case"python-pipenv":break;case"ts-swc-npm":d(e)}},f=e=>{(0,n.deleteFilesInFolder)(e.repoName??"",e.excluded??"",!0)},x=e=>{if("win"===c)try{let t=`${e.repoName}_temp`;for(let n of((0,r.execSync)(`xcopy "${e.repoName}" "${t}\\" /E /I /H /Y`,s),e.excluded?e.excluded.split(","):["node_modules","package-lock.json","package.json"])){let e=`${t}/${n}`;try{n.includes("/")?(0,r.execSync)(`rmdir /s /q "${e}"`,s):(0,r.execSync)(`del /q "${e}"`,s)}catch(e){console.log(`Warning: Could not remove ${n}`)}}(0,r.execSync)(`powershell -Command "Compress-Archive -Path ${t}/* -DestinationPath ${e.repoName}.zip -Force"`,s),(0,r.execSync)(`rmdir /s /q "${t}"`,s)}catch(e){throw console.error("Error during zip operation:",e),e}else{let t=e.excluded?e.excluded.split(",").map(e=>`"${e}"`).join(" "):'"*/node_modules/*" ".git/*"';(0,r.execSync)(`zip -r ${e.repoName}.zip ${e.repoName} -x ${t}`,s)}},g=(e,o="__MACOSX/,node_modules/,.DS_Store,.git/")=>{let i=a(),c=[];for(let l of(0,n.findFiles)(e,"*.zip"))try{let e;let p=`${i}/_unzip/${t.default.parse(l).name}`;if(console.log(`## extractPath: ${p}`),(0,n.makeDir)(p),"win32"===process.platform)for(let n of(e=`powershell -command "Expand-Archive -Path '${l}' -DestinationPath '${p}' -Force"`,o.split(",").map(e=>e.trim()))){let e=t.default.join(p,n.replace("/",""));n.endsWith("/")?(0,r.execSync)(`if exist "${e}" rmdir /s /q "${e}"`,s):(0,r.execSync)(`if exist "${e}" del /q "${e}"`,s)}else{let r=o.split(",").map(e=>`"${e.trim()}"`).join(" ");e=`unzip -o "${l}" -d "${p}" -x ${r}`}(0,r.execSync)(e),console.log(`압축 해제 완료: ${l} -> ${p}`),c.push(p)}catch(e){console.error(`'${l}' 압축 해제 중 오류 발생:`,e.message)}return(0,n.deleteFilesInFolder)(i,"__MACOSX/",!0),c.join(",")},y=e=>{{if("win"===c){let t=e.excluded?e.excluded.split(",").join("|"):"node_modules|dist|_backups|_drafts|types|docs";try{let e=`powershell -NoProfile -ExecutionPolicy Bypass -Command "$OutputEncoding = [Console]::OutputEncoding = [Text.Encoding]::UTF8; tree /F /A | Select-String -NotMatch '${t}'"`;console.log("Command: ",e);let o=(0,r.execSync)(e,{encoding:"utf8",stdio:"pipe"});return console.log("Result: ",o),o&&(0,n.saveFile)("tree.txt",o,{overwrite:!0,newFile:!1,encoding:"utf8"}),o||""}catch(e){return console.error("Error executing tree command:",e),""}}let t=e.excluded?`"${e.excluded.split(",").join("|")}"`:'"node_modules|dist|_backups|_drafts|types|docs"',o=`tree -I ${t} --dirsfirst -L 3`;try{console.log("Command: ",o);let e=(0,r.execSync)(o,{encoding:"utf8",stdio:"pipe"});return e&&(0,n.saveFile)("tree.txt",e,{overwrite:!0,newFile:!1}),e||""}catch(e){return console.error("Error executing tree command:",e),""}}};