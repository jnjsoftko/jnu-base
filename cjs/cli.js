"use strict";var e;Object.defineProperty(exports,"__esModule",{value:!0}),!function(e,n){for(var r in n)Object.defineProperty(e,r,{enumerable:!0,get:n[r]})}(exports,{PLATFORM:function(){return c},TEMPLATES_ROOT:function(){return o},exe:function(){return s},exec:function(){return p},execOptions:function(){return u},getParentDir:function(){return a},initApp:function(){return d},removeApp:function(){return l},zip:function(){return f}});const n=require("child_process"),r=(e=require("path"))&&e.__esModule?e:{default:e},t=require("./builtin"),i=require("./git"),o=`${process.env.DEV_CONFIG_ROOT}/Templates`??"C:/JnJ-soft/Developments/Templates",c="win32"===process.platform?"win":"darwin"===process.platform?"mac":"linux"===process.platform?"linux":process.platform,p=e=>(0,n.execSync)(e,{encoding:"utf8"}).toString().trim(),s=e=>{let n=[];return e.forEach(e=>n.push(p(e))),n},u={encoding:"utf8",shell:"win32"===process.platform?"cmd.exe":"/bin/sh"},a=()=>r.default.dirname((0,n.execSync)("pwd",u).toString().trim()),m=e=>{let r=(0,i.findGithubAccount)(e.userName??""),p=a();"win"===c?console.log("win"):((0,n.execSync)(`cp -r ${o}/ts-swc-npm ${e.repoName}`,u),(0,t.substituteInFile)(`${e.repoName}/package.json`,{"{{name}}":e.repoName??"","{{author}}":`${r.fullName} <${r.email}>`,"{{description}}":e.description??""}),(0,t.substituteInFile)(`${e.repoName}/README.md`,{"{{name}}":e.repoName??"","{{author}}":`${r.fullName} <${r.email}>`,"{{github-id}}":e.userName??"","{{description}}":e.description||"","{{parent-dir}}":p}),(0,n.execSync)(`cd ${e.repoName} && npm install`,u),(0,n.execSync)(`github -e pushRepo -u ${e.userName} -n ${e.repoName} -d "${e.description}"`,u))},l=e=>{(0,n.execSync)(`github -e deleteRepo -u ${e.userName} -n ${e.repoName}`,u),(0,n.execSync)(`rm -rf ${e.repoName}`,u)},d=e=>{switch(e.template){case"node-simple":case"python-pipenv":break;case"ts-swc-npm":m(e)}},f=e=>{if("win"===c){let r=e.excluded?e.excluded.split(",").map(e=>`"${e}"`).join(","):'"*/node_modules/*",".git/*"';(0,n.execSync)(`powershell -Command "Compress-Archive -Path ${e.repoName} -DestinationPath ${e.repoName}.zip -Exclude ${r}"`,u)}else{let r=e.excluded?e.excluded.split(",").map(e=>`"${e}"`).join(" "):'"*/node_modules/*",".git/*"';(0,n.execSync)(`zip -r ${e.repoName}.zip ${e.repoName} -x ${r}`,u)}};