"use strict";var e;Object.defineProperty(exports,"__esModule",{value:!0}),!function(e,t){for(var o in t)Object.defineProperty(e,o,{enumerable:!0,get:t[o]})}(exports,{cloneRepo:function(){return f},copyRepo:function(){return $},createRemoteRepo:function(){return u},createRemoteRepoEmpty:function(){return a},deleteRemoteRepo:function(){return m},findAllRepos:function(){return l},findGithubAccount:function(){return s},initLocalRepo:function(){return g},initRepo:function(){return d},makeRepo:function(){return h},pushRepo:function(){return R},removeRepo:function(){return y},setLocalConfig:function(){return p}});const t=(e=require("path"))&&e.__esModule?e:{default:e},o=require("child_process"),n=require("./builtin.js"),i=require("./basic.js"),r=require("./cli.js"),c=`${process.env.DEV_CONFIG_ROOT}/Environments`??"C:/JnJ-soft/Developments/Environments",s=e=>(0,n.loadJson)(`${c}/Apis/github.json`)[e],l=e=>{console.log(e.rest.repos)},u=(e,t)=>(console.log("#### createRemoteRepo options: ",t),e.rest.repos.createForAuthenticatedUser({auto_init:!0,private:!1,license_template:"MIT",...t})),a=(e,t)=>(console.log("#### createRemoteRepoEmpty options: ",t),u(e,{...t,auto_init:!1,license_template:void 0})),m=(e,t,o)=>{let{name:n}=t;return e.rest.repos.delete({owner:o.userName,repo:n})},p=(e,t,n)=>{let i=`cd ${n} && git config user.name "${t.fullName}"`;console.log(i+=` && git config user.email "${t.email}" && git remote set-url origin https://${t.token}@github.com/${t.userName}/${e.name}.git`),(0,o.execSync)(i)},g=(e,t,n)=>{let{name:i}=e,{fullName:r,email:c,token:s,userName:l}=t,u=`cd ${n} && git init`;console.log(u+=` && git config user.name "${r}" && git config user.email "${c}" && git remote set-url origin https://${t.token}@github.com/${t.userName}/${e.name}.git && git add . && git commit -m "Initial commit"`),(0,o.execSync)(u)},f=(e,n,i)=>{let r=`cd ${t.default.dirname(i)} && git clone https://${n.token}@github.com/${n.userName}/${e.name}.git`;console.log(r),(0,o.execSync)(r)},d=(e,t,o,n)=>{u(e,t),(0,i.sleep)(5e3),f(t,o,n),p(t,o,n)},$=(e,t,o)=>{f(e,t,o),p(e,t,o)},R=(e,t,n)=>{(0,o.execSync)(`cd ${n}`);let i=(0,o.execSync)("git branch");console.log(`#### pushRepo branches: ${i}`),i.includes("main")?(0,o.execSync)("git push -u origin main"):i.includes("master")?(0,o.execSync)("git push -u origin master"):console.log("main 또는 master 브랜치가 없습니다.")},h=(e,t,o,n)=>{console.log(`=================== createRemoteRepoEmpty: ${n}`),a(e,t),(0,i.sleep)(5),console.log(`=================== initLocalRepo: ${n}`),g(t,o,n),(0,i.sleep)(3),console.log(`=================== pushRepo: ${n}`),R(t,o,n)},y=(e,n,i,c)=>{m(e,n,i);let{name:s}=n;if((0,o.execSync)(`cd ${t.default.dirname(c)}`),"win"===r.PLATFORM){let e=`rmdir /s /q ${s}`;console.log(e),(0,o.execSync)(e)}else{let e=`rm -rf ${s}`;console.log(e),(0,o.execSync)(e)}};