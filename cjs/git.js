"use strict";var e;Object.defineProperty(exports,"__esModule",{value:!0}),!function(e,o){for(var t in o)Object.defineProperty(e,t,{enumerable:!0,get:o[t]})}(exports,{cloneRepo:function(){return d},copyRepo:function(){return $},createRemoteRepo:function(){return u},createRemoteRepoEmpty:function(){return a},deleteRemoteRepo:function(){return m},findAllRepos:function(){return s},findGithubAccount:function(){return l},initLocalRepo:function(){return g},initRepo:function(){return f},makeRepo:function(){return y},pushRepo:function(){return R},removeRepo:function(){return h},setLocalConfig:function(){return p}});const o=(e=require("path"))&&e.__esModule?e:{default:e},t=require("child_process"),n=require("./builtin.js"),i=require("./basic.js"),c=require("./cli.js"),r=`${process.env.DEV_CONFIG_ROOT}/Environments`??"C:/JnJ-soft/Developments/Environments",l=e=>(0,n.loadJson)(`${r}/Apis/github.json`)[e],s=e=>{console.log(e.rest.repos)},u=(e,o)=>(console.log("#### createRemoteRepo options: ",o),e.rest.repos.createForAuthenticatedUser({auto_init:!0,private:!1,license_template:"MIT",...o})),a=(e,o)=>(console.log("#### createRemoteRepoEmpty options: ",o),u(e,{...o,auto_init:!1,license_template:void 0})),m=(e,o,t)=>{let{name:n}=o;return console.log(`### deleteRemoteRepo: ${n}`),e.rest.repos.delete({owner:t.userName,repo:n})},p=(e,o,n)=>{let i=`cd ${n} && git config user.name "${o.fullName}"`;console.log(i+=` && git config user.email "${o.email}" && git remote set-url origin https://${o.token}@github.com/${o.userName}/${e.name}.git`),(0,t.execSync)(i)},g=(e,o,n)=>{let{name:i}=e,{fullName:c,email:r,token:l,userName:s}=o,u=`cd ${n} && git init`;console.log(u+=` && git config user.name "${c}" && git config user.email "${r}" && git remote add origin https://${l}@github.com/${s}/${i}.git && git add . && git commit -m "Initial commit"`),(0,t.execSync)(u)},d=(e,n,i)=>{let c=`cd ${o.default.dirname(i)} && git clone https://${n.token}@github.com/${n.userName}/${e.name}.git`;console.log(c),(0,t.execSync)(c)},f=(e,o,t,n)=>{u(e,o),(0,i.sleep)(10),d(o,t,n),(0,i.sleep)(5),p(o,t,n)},$=(e,o,t)=>{d(e,o,t),(0,i.sleep)(10),p(e,o,t)},R=(e,o,n)=>{if((0,t.execSync)(`cd ${n}`),(0,t.execSync)("git status --porcelain",{encoding:"utf8"}).length>0){let e='git add . && git commit -m "Initial commit"';console.log("#### ",e),(0,t.execSync)(e)}let i=(0,t.execSync)("git branch");console.log(`#### pushRepo branches: ${i}`),i.includes("main")?(0,t.execSync)("git push -u origin main --force"):i.includes("master")?(0,t.execSync)("git push -u origin master --force"):console.log("main 또는 master 브랜치가 없습니다.")},y=(e,o,n,c)=>{let r=`xgit -e createRemoteRepo -u ${n.userName} -n ${o.name}`;console.log(`initRepo cmd: ${r}`),(0,t.execSync)(r),(0,i.sleep)(15),console.log(`=================== initLocalRepo: ${c}`),g(o,n,c),(0,i.sleep)(5),console.log(`=================== pushRepo: ${c}`),R(o,n,c)},h=(e,n,r,l)=>{m(e,n,r),(0,i.sleep)(10);let{name:s}=n;if("win"===c.PLATFORM)try{let e=`cd ${o.default.dirname(l)}`;console.log(e),(0,t.execSync)(e);let n=`rmdir /s /q ${s}`;console.log(n),(0,t.execSync)(n)}catch(e){console.error("Failed to remove directory:",e);try{let e=`rd /s /q "${l}"`;console.log("Trying alternative command:",e),(0,t.execSync)(e)}catch(e){console.error("Alternative removal also failed:",e)}}else{let e=`cd ${o.default.dirname(l)} && rm -rf ${s}`;console.log(e),(0,t.execSync)(e)}};