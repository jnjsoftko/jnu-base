#!/usr/bin/env node
"use strict";var e;Object.defineProperty(exports,"__esModule",{value:!0});const o=require("@octokit/rest"),r=(e=require("yargs"))&&e.__esModule?e:{default:e},t=require("./git.js"),a=require("./cli.js"),i=r.default.usage("Usage: -u <url> -s <keyword>").option("e",{alias:"exec",default:"copyRepo",describe:"exec command copyRepo(clone+local config)/makeRepo(create remote+push)/removeRepo(delete remote+local)",type:"string",demandOption:!0}).option("u",{alias:"userName",default:"mooninlearn",describe:"Name of User",type:"string"}).option("n",{alias:"repoName",describe:"NameOfRepository",type:"string"}).option("d",{alias:"description",describe:"Description For Repository",type:"string"}).argv,s=(0,t.findGithubAccount)(i.userName??"");s.userName=i.userName??"",console.log(`@@@@@@@@@@@@@@@@@account: ${s}`);const p=new o.Octokit({auth:s.token}),c=`${(0,a.getCurrentDir)()}/${i.repoName??""}`;switch(i.exec){case"initRepo":(0,t.initRepo)(p,{name:i.repoName??"",description:i.description??""},s,c);break;case"createRemoteRepo":(0,t.createRemoteRepo)(p,{name:i.repoName??"",description:i.description??""});break;case"deleteRemoteRepo":(0,t.deleteRemoteRepo)(p,{name:i.repoName??""},s);break;case"copyRepo":(0,t.copyRepo)({name:i.repoName??"",description:i.description??"description"},s,c);break;case"makeRepo":(0,t.makeRepo)(p,{name:i.repoName??"",description:i.description??""},s,c);break;case"removeRepo":(0,t.removeRepo)(p,{name:i.repoName??""},s,c)}