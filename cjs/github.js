"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),!function(e,t){for(var i in t)Object.defineProperty(e,i,{enumerable:!0,get:t[i]})}(exports,{Github:function(){return r},findGithubAccount:function(){return c}});const e=require("child_process"),t=require("@octokit/rest"),i=require("./builtin.js"),o=require("./basic.js");function s(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}const n=`${process.env.DEV_CONFIG_ROOT}/Environments`??"C:/JnJ-soft/Developments/Environments",c=e=>(0,i.loadJson)(`${n}/Apis/github.json`)[e];class r{constructor(i){s(this,"userName",void 0),s(this,"account",void 0),s(this,"octokit",void 0),s(this,"findAllRepos",()=>{console.log(this.octokit.rest.repos)}),s(this,"createRepo",e=>{this.octokit.rest.repos.createForAuthenticatedUser({auto_init:!0,private:!1,license_template:"MIT",...e})}),s(this,"cloneRepo",t=>{let i=`git clone https://github.com/${this.userName}/${t.name}.git`;console.log(i),(0,e.execSync)(i)}),s(this,"changeRepo",t=>{let i=`cd ${t.name} && git remote remove origin`;console.log(i+=` && git remote add origin https://github.com/${this.userName}/${t.name}`),(0,e.execSync)(i)}),s(this,"setConfigRepo",t=>{let i=`cd ${t.name} && git config user.name "${this.account.fullName}"`;console.log(i+=` && git config user.email "${this.account.email}" && git remote set-url origin https://${this.account.token}@github.com/${this.userName}/${t.name}.git`),(0,e.execSync)(i)}),s(this,"copyRepo",e=>{this.cloneRepo(e),this.setConfigRepo(e)}),s(this,"initRepo",e=>{this.createRepo(e);let t=this;setTimeout(()=>{t.cloneRepo(e),t.setConfigRepo(e)},5e3)}),s(this,"pushRepo",t=>{let{name:i}=t,{fullName:s,email:n,token:c}=this.account;(0,o.sleep)(3);let r="git init";console.log(r+=` && git config user.name "${s}" && git config user.email "${n}" && git remote add origin https://${c}@github.com/${this.userName}/${i}.git`),(0,e.execSync)(r),console.log(r='git add . && git commit -m "Initial commit"'),(0,e.execSync)(r);let u=(0,e.execSync)("git branch");u.includes("main")?(0,e.execSync)("git push -u origin main"):u.includes("master")?(0,e.execSync)("git push -u origin master"):console.log("main 또는 master 브랜치가 없습니다.")}),s(this,"deleteRepo",e=>{let{name:t}=e;this.octokit.rest.repos.delete({owner:this.userName,repo:t})}),this.userName=i,this.account=c(i),this.octokit=new t.Octokit({auth:this.account.token})}}