{"version":3,"sources":["../src/basic.ts"],"sourcesContent":["import type { Dict } from './types.js';\r\n\r\n// & Functions AREA\r\n// &---------------------------------------------------------------------------\r\n\r\n// * Test\r\n/**\r\n * 간단한 테스트용 함수\r\n * @returns 'pong'\r\n * \r\n * @example\r\n * ```ts\r\n * ping() // 'pong'\r\n * ```\r\n */\r\nconst ping = () => 'pong';\r\n\r\n// * Check Functions\r\n/**\r\n * 객체가 빈 객체(`{}`)인지 확인\r\n * @param obj 검사할 객체\r\n * @returns 빈 객체이면 true, 아니면 false\r\n * \r\n * @example\r\n * ```ts\r\n * isEmptyDict({}) // true\r\n * isEmptyDict({ a: 1 }) // false\r\n * ```\r\n */\r\nconst isEmptyDict = (obj: any) => JSON.stringify(obj) === '{}';\r\n\r\n/**\r\n * 객체가 빈 객체(`{}`) 또는 빈 배열(`[]`)인지 확인\r\n * @param v 검사할 값\r\n * @returns 빈 객체/배열이면 true, 아니면 false\r\n * \r\n * @example\r\n * ```ts\r\n * isEmpty({}) // true\r\n * isEmpty([]) // true\r\n * isEmpty({ a: 1 }) // false\r\n * ```\r\n */\r\nconst isEmpty = (v: any) => JSON.stringify(v) === '{}' || JSON.stringify(v) === '[]';\r\n\r\n/**\r\n * Falsy 값인지 확인\r\n * @param v 검사할 값\r\n * @returns Falsy이면 true, 아니면 false\r\n * \r\n * @example\r\n * ```ts\r\n * isFalsy(false) // true\r\n * isFalsy(undefined) // true\r\n * isFalsy(null) // true\r\n * isFalsy(0) // true\r\n * isFalsy('') // true\r\n * isFalsy({}) // true\r\n * ```\r\n */\r\nconst isFalsy = (v: any) => {\r\n  if (v === true) return false;\r\n  if (typeof v === 'number' && v !== 0) return false;\r\n  \r\n  return (\r\n    v === false ||\r\n    v === undefined ||\r\n    v === null ||\r\n    Number.isNaN(v) ||\r\n    v === 0 ||\r\n    v === '' ||\r\n    (Array.isArray(v) && v.length === 0) ||\r\n    (typeof v === 'object' && v !== null && Object.keys(v).length === 0)\r\n  );\r\n};\r\n\r\n/**\r\n * 유효한 문자열인지 확인\r\n * @param s 검사할 문자열\r\n * @returns 유효한 문자열이면 true, 아니면 false\r\n * \r\n * @example\r\n * ```ts\r\n * isValidStr('hello') // true\r\n * isValidStr('') // false\r\n * isValidStr(null) // false\r\n * ```\r\n */\r\nconst isValidStr = (s: any) => {\r\n  if (s === null || s === undefined || typeof s !== 'string') {\r\n    return false;\r\n  }\r\n  return s.trim() !== '';\r\n};\r\n\r\n// * Convert Functions\r\n/**\r\n * NonPOJO 객체를 POJO 객체로 변환\r\n * @param obj 변환할 객체\r\n * @returns POJO 객체\r\n */\r\nconst serializeNonPOJOs = (obj: any) => structuredClone(obj);\r\n\r\n// * String Functions\r\n/**\r\n * 문자열 내의 표현식(`${expression}`) 평가\r\n * @param str 평가할 문자열\r\n * @param values 표현식에 사용할 값들\r\n * @returns 평가된 문자열\r\n * \r\n * @example\r\n * ```ts\r\n * evalStr('${i + j}', { i: 1, j: 2 }) // '3'\r\n * ```\r\n */\r\nconst evalStr = (str: string, values: Dict) => {\r\n  const regex = /\\${(.*?)}/g;\r\n  return str.replace(regex, (match, expression) => {\r\n    const code = `return ${expression}`;\r\n    const value = new Function(...Object.keys(values), code)(...Object.values(values));\r\n    return value;\r\n  });\r\n};\r\n\r\n/**\r\n * 문자열이 배열의 요소 중 하나를 포함하는지 확인\r\n * @param s 검사할 문자열\r\n * @param arr 검사할 문자열 배열\r\n * @returns 포함하면 true, 아니면 false\r\n * \r\n * @example\r\n * ```ts\r\n * includesMulti('hello world', ['hello', 'hi']) // true\r\n * ```\r\n */\r\nconst includesMulti = (s: string, arr: string[]) => {\r\n  for (const a of arr) {\r\n    if (s.includes(a)) return true;\r\n  }\r\n  return false;\r\n};\r\n\r\n/**\r\n * 어떤 타입의 값을 문자열로 변환\r\n * @param s 변환할 값\r\n * @returns 변환된 문자열\r\n * \r\n * @example\r\n * ```ts\r\n * strFromAny(123) // '123'\r\n * strFromAny({ a: 1 }) // '{\"a\":1}'\r\n * ```\r\n */\r\nconst strFromAny = (s: any) => typeof s === 'string' ? s.trim() : JSON.stringify(s);\r\n\r\n// * CSV Functions\r\n/**\r\n * CSV 문자열을 2차원 배열로 변환\r\n * @param csv CSV 문자열\r\n * @param sep 구분자 (기본값: ',')\r\n * @param hasQuote 따옴표 포함 여부 (기본값: true)\r\n * @param newline 줄바꿈 문자 (기본값: '\\n')\r\n * @returns 2차원 배열\r\n * \r\n * @example\r\n * ```ts\r\n * rowsFromCsv('\"a\",\"b\"\\n\"1\",\"2\"') // [['a','b'], ['1','2']]\r\n * ```\r\n */\r\nconst rowsFromCsv = (csv: string, sep = ',', hasQuote = true, newline = '\\n') => {\r\n  const rows: string[][] = [];\r\n  for (const line of csv.split(newline)) {\r\n    if (hasQuote) {\r\n      rows.push(line.slice(1, -1).split(`\"${sep}\"`).map(s => s.trim()));\r\n    } else {\r\n      rows.push(line.split(sep).map(s => s.trim()));\r\n    }\r\n  }\r\n  return rows;\r\n};\r\n\r\n/**\r\n * 2차원 배열을 CSV 문자열로 변환\r\n * @param rows 2차원 배열\r\n * @param sep 구분자 (기본값: ',')\r\n * @param hasQuote 따옴표 포함 여부 (기본값: true)\r\n * @param newline 줄바꿈 문자 (기본값: '\\n')\r\n * @returns CSV 문자열\r\n * \r\n * @example\r\n * ```ts\r\n * csvFromRows([['a','b'], ['1','2']]) // '\"a\",\"b\"\\n\"1\",\"2\"'\r\n * ```\r\n */\r\nconst csvFromRows = (rows: any[][], sep = ',', hasQuote = true, newline = '\\n') => {\r\n  let str = '';\r\n  for (const row of rows) {\r\n    if (hasQuote) {\r\n      str += `\"${row.join('\"' + sep + '\"')}\"${newline}`;\r\n    } else {\r\n      str += `${row.join(sep)}${newline}`;\r\n    }\r\n  }\r\n  return str;\r\n};\r\n\r\n// * Array Functions\r\n/**\r\n * 2차원 배열에서 특정 인덱스의 값들을 추출\r\n * @param rows 2차원 배열\r\n * @param index 추출할 인덱스\r\n * @param hasHeader 헤더 포함 여부\r\n * @returns 추출된 1차원 배열\r\n * \r\n * @example\r\n * ```ts\r\n * arrFromArrs([[1,2], [3,4]], 1) // [2,4]\r\n * ```\r\n */\r\nconst arrFromArrs = (rows: any[][], index = 0, hasHeader = false) => {\r\n  const arr = rows.map(row => row[index]);\r\n  return hasHeader ? arr.slice(1) : arr;\r\n};\r\n\r\n// * Dictionary Functions\r\n/**\r\n * 객체에서 특정 키를 제거\r\n * @param obj 대상 객체\r\n * @param key 제거할 키\r\n * @returns 키가 제거된 객체\r\n * \r\n * @example\r\n * ```ts\r\n * popDict({a:1, b:2}, 'a') // {b:2}\r\n * ```\r\n */\r\nconst popDict = (obj: Dict, key: string) => {\r\n  delete obj[key];\r\n  return obj;\r\n};\r\n\r\n/**\r\n * New Dict Keys(maps의 key들에 대해, 변경된 key 이름으로 dict 생성)\r\n * @param obj - dict\r\n * @param maps - mapping dict for rename keys\r\n * @param valMap - obj에 없는 key(maps에만 있는)에 대한 default값\r\n * @param dfault - valMap에 없을 때의 default값\r\n *\r\n * @example\r\n * newKeys({ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 'a1', 'c': 'c1', 'd': 'd1' }, {'d1': ''})\r\n * => { a1: 1, c1: 3, d1: '' }\r\n */\r\nconst newKeys = (\r\n  obj: Record<string, any>,\r\n  maps: Record<string, string>,\r\n  valMap: Record<string, any>,\r\n  dfault = ''\r\n) => {\r\n  return Object.keys(maps).reduce(function (obj_, key) {\r\n    obj_[maps[key]] = obj[key] ?? valMap[key] ?? dfault;\r\n    return obj_;\r\n  }, {} as Record<string, any>);\r\n};\r\n\r\n/**\r\n * Rename Dict Keys(obj의 key들에 대한 이름 변경(변경 되지 않은 것은 유지))\r\n * @param obj - dict\r\n * @param maps - mapping dict for rename keys\r\n *\r\n * @example\r\n * renameKeys({ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 'a1', 'c': 'c1', 'd': 'd1' })\r\n * =>\r\n * { a1: 1, b: 2, c1: 3 }\r\n */\r\nconst renameKeys = (obj: Record<string, any>, maps: Record<string, string>) => {\r\n  return Object.keys(obj).reduce(function (obj_, key) {\r\n    obj_[maps[key] ?? key] = obj[key];\r\n    return obj_;\r\n  }, {} as Record<string, any>);\r\n};\r\n\r\n/**\r\n * Overwrite Dict Keys(newKeys(신규 key 추가) + rename(key 이름 변경))\r\n * @param obj - dict\r\n * @param maps - mapping dict for rename keys\r\n * @param valMap - obj에 없는 key(maps에만 있는)에 대한 default값\r\n * @param dfault - valMap에 없을 때의 default값\r\n *\r\n * @example\r\n * overwriteKeys({ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 'a1', 'c': 'c1', 'd': 'd1' }, {'d1': ''})\r\n * =>\r\n *  { a1: 1, b: 2, c1: 3, d1: '' }\r\n */\r\nconst overwriteKeys = (\r\n  obj: Record<string, any>,\r\n  maps: Record<string, string>,\r\n  valMap: Record<string, any>,\r\n  dfault = ''\r\n) => {\r\n  return Object.keys({ ...obj, ...valMap }).reduce(function (obj_, key) {\r\n    obj_[maps[key] ?? key] = obj[key] ?? valMap[key] ?? dfault;\r\n    return obj_;\r\n  }, {} as Record<string, any>);\r\n};\r\n\r\n/**\r\n * Update Dict Keys\r\n * @param obj - dict\r\n * @param maps - mapping dict for rename keys\r\n * @param valMap - obj에 없는 key(maps에만 있는)에 대한 default값\r\n * @param dfault - valMap에 없을 때의 default값\r\n * @param method\r\n *  - new: maps의 key들로만 신규 생성\r\n *  - rename: obj의 key들에 대한 이름 변경(변경 되지 않은 것은 유지)\r\n *  - update: new + update(obj 이름 변경, 신규 key 추가)\r\n *\r\n * @example\r\n * const dict = { 'a': 1, 'b': 2, 'c': 3 }\r\n * const maps = { 'a': 'a1', 'c': 'c1', 'd': 'd1' }\r\n * const valMap = {'d1': ''}\r\n * const method = 'new' | 'rename' | 'update';\r\n * updateKeys(dict, maps, valMap, method)\r\n * =>\r\n * - { a1: 1, c1: 3, d1: '' } <= method = 'new'\r\n * - { a1: 1, b: 2, c1: 3 } <= method = 'rename'\r\n * - { a1: 1, b: 2, c1: 3, d1: '' } <= method = 'update'\r\n */\r\nconst updateKeys = (\r\n  obj: Record<string, any>,\r\n  maps: Record<string, string>,\r\n  valMap: Record<string, any>,\r\n  dfault = '',\r\n  method = 'new'\r\n) => {\r\n  let _obj = maps; // method: `new`\r\n  switch (method.toLowerCase()) {\r\n    case 'rename':\r\n      _obj = obj;\r\n      break;\r\n    case 'update':\r\n      _obj = { ...obj, ...valMap };\r\n      break;\r\n  }\r\n\r\n  return Object.keys(_obj).reduce(function (obj_, key) {\r\n    obj_[maps[key] ?? key] = obj[key] ?? valMap[key] ?? dfault;\r\n    return obj_;\r\n  }, {} as Record<string, any>);\r\n};\r\n\r\n/**\r\n * Arr From Dicts(Extract array By Key)\r\n * @param dicts - source dicts\r\n *\r\n * @example\r\n *  arrFromDicts([{'h1': 'v11', 'h1': 'v12'}, {'h1': 'v21', 'h1': 'v22'}], 'h1')\r\n *   => ['v11', 'v21']\r\n */\r\nconst arrFromDicts = (dicts: any[], key: string) => {\r\n  return dicts.map((dict) => dict[key]);\r\n};\r\n\r\n/**\r\n * Returns Dict(object) From Duo(Keys, Vals)\r\n * @param keys - dict keys\r\n * @param vals - dict values\r\n *\r\n * @example\r\n * dictFromDuo(['a', 'b'], [1, 2]))\r\n *  => {'a': 1, 'b': 2}\r\n * ```\r\n */\r\nconst dictFromDuo = (keys: any[], vals: any[]) => {\r\n  return keys.reduce((dict, key, i) => {\r\n    dict[key] = vals[i];\r\n    return dict;\r\n  }, {});\r\n};\r\n\r\n/**\r\n * Returns Dicts(objects) From Duos(Keys, Valss)\r\n * @param keys - dict keys\r\n * @param vals - array of values\r\n *\r\n * @example\r\n * dictFromDuo(['a', 'b'], [[1, 2], [3,4]])\r\n *  => [{'a': 1, 'b': 2}, {'a': 3, 'b': 4}]\r\n */\r\nconst dictsFromDuos = (keys: any[], valss: any[][]) => {\r\n  return valss.map((vals) =>\r\n    keys.reduce((dict, key, i) => {\r\n      dict[key] = vals[i];\r\n      return dict;\r\n    }, {})\r\n  );\r\n};\r\n\r\n/**\r\n * Duo From Dict\r\n * @param obj - source dict\r\n * @example\r\n * duoFromDict({'h1': 'v11', 'h1': 'v12'})\r\n *  => [['h1', 'h2'], ['v11', 'v12']]\r\n */\r\nconst duoFromDict = (obj: any) => {\r\n  if (obj === null || typeof obj !== 'object') {\r\n    return [];\r\n  }\r\n  return [Object.keys(obj), Object.values(obj)];\r\n};\r\n\r\n/**\r\n * Rows Added Default Values\r\n * @param rows - given rows\r\n * @param valMap - added default values\r\n * @param isPush -\r\n *\r\n * @example\r\n *  rowsAddedDefaults([['h1', 'h2'], ['v11', 'v12'], ['v21', 'v22']], {'h3': ''}, false)\r\n *  => [['h1', 'h2', 'h3'], ['v11', 'v12', ''], ['v21', 'v22', '']]\r\n */\r\nconst rowsAddedDefaults = (rows: any[], valMap = {}, isPush = false) => {\r\n  const addKeys = Object.keys(valMap);\r\n  const addVals = Object.values(valMap);\r\n  if (isPush) {\r\n    return rows.map((arr, i) =>\r\n      i === 0 ? [...arr, ...addKeys] : [...arr, ...addVals]\r\n    );\r\n  } else {\r\n    return rows.map((arr, i) =>\r\n      i === 0 ? [...addKeys, ...arr] : [...addVals, ...arr]\r\n    );\r\n  }\r\n};\r\n\r\n/**\r\n * headerIndexArr\r\n *   - newKeys\r\n *   - keyDuo의 key에 해당하는 oldHeader의 index(-1: oldHeader에는 없는 key)\r\n * @param oldHeader - source rows\r\n * @param keyDuo - key mapping [['oldKey1', ...], ['newKey1', ...]]\r\n * @example\r\n * headerIndexArr(['h1', 'h2', 'h3'],  [['h3', 'h4', 'h1'], ['_h3', '_h4', '_h1']])\r\n *  => [['_h3', '_h4', '_h1'], [2, -1, 0]]\r\n */\r\nconst headerIndexArr = (oldHeader: any[], keyDuo: any[][] = [[]]) => {\r\n  let newHeader = oldHeader;\r\n  let indexArr = [...Array(oldHeader.length).keys()];\r\n  if (keyDuo[0].length > 0) {\r\n    newHeader = keyDuo[1];\r\n    indexArr = keyDuo[0].map((h) => oldHeader.indexOf(h));\r\n  }\r\n  return [newHeader, indexArr];\r\n};\r\n\r\n/**\r\n * Dicts From Rows\r\n * @param rows - source rows\r\n * @param keyDuo - key mapping [['oldKey1', ...], ['newKey1', ...]]\r\n * @param dfault - rows에 없는 key인 경우 default값\r\n * @example\r\n * dictsFromRows([['h1', 'h2'], ['v11', 'v12'], ['v21', 'v22']],  [['h2', 'h3', 'h1'], ['_h2', '_h3', '_h1']])\r\n *  => [{ _h2: 'v12', _h3: '', _h1: 'v11' }, { _h2: 'v22', _h3: '', _h1: 'v21' }]  // 순서는 의미가 없을 수 있음\r\n */\r\nconst dictsFromRows = (rows: any[][], keyDuo: any[][] = [[]], dfault = '') => {\r\n  if (!rows || rows.length == 0) {\r\n    return [];\r\n  }\r\n  let [header, indexMaps] = headerIndexArr(rows.shift()!, keyDuo);\r\n\r\n  return rows.map((arr) => {\r\n    let dict: any = {};\r\n    header.forEach((h: any, i: number) => {\r\n      dict[h] = indexMaps[i] != -1 ? arr[indexMaps[i]] ?? dfault : dfault;\r\n    });\r\n    return dict;\r\n  });\r\n};\r\n\r\n/**\r\n * Rows From Dicts\r\n * @param dicts - source dicts\r\n * @param keyDuo - key mapping [['oldKey1', ...], ['newKey1', ...]]\r\n * @param dfault - rows에 없는 key인 경우 default값\r\n * @example\r\n * rowsFromDicts([{'h1': 'v11', 'h2': 'v12', 'h3': 'v13'}, {'h1': 'v21', 'h2': 'v22', 'h3': 'v13'}], [['h3', 'h4', 'h1'], ['_h3', '_h4', '_h1']], '_v_')\r\n *  => [[ '_h3', '_h4', '_h1' ], [ 'v13', '_v_', 'v11' ], [ 'v13', '_v_', 'v21' ]]\r\n */\r\nconst rowsFromDicts = (dicts: any[], keyDuo: any[][] = [[]], dfault = '') => {\r\n  if (!dicts || dicts.length == 0) {\r\n    return [];\r\n  }\r\n\r\n  const _header = Object.keys(dicts[0]);\r\n  let [header, indexMaps] = headerIndexArr(_header, keyDuo);\r\n\r\n  let rows: any[][] = [header];\r\n  for (let row of dicts) {\r\n    let content: any[] = [];\r\n    for (let i = 0; i < header.length; i++) {\r\n      const i_ = indexMaps[i];\r\n      i_ == -1 ? content.push(dfault) : content.push(row[_header[i_]]);\r\n    }\r\n    rows.push(content);\r\n  }\r\n  return rows;\r\n};\r\n\r\n/**\r\n * Arrs From Dicts\r\n */\r\nconst arrsFromDicts = (dicts: Record<any, any>[]): any[][] => {\r\n  const keys = Object.keys(dicts[0]);\r\n  const result: any[][] = [keys];\r\n\r\n  for (const dict of dicts) {\r\n    const values: any[] = [];\r\n\r\n    for (const key of keys) {\r\n      values.push(dict[key]);\r\n    }\r\n\r\n    result.push(values);\r\n  }\r\n\r\n  return result;\r\n};\r\n\r\n/**\r\n * Dicts From Arrs\r\n */\r\nconst dictsFromArrs = (arrs: any[][]): Record<any, any>[] => {\r\n  const keys = arrs[0];\r\n  const result: Record<any, any>[] = [];\r\n\r\n  for (let i = 1; i < arrs.length; i++) {\r\n    const values = arrs[i];\r\n    const dict: Record<any, any> = {};\r\n\r\n    for (let j = 0; j < keys.length; j++) {\r\n      dict[keys[j]] = values[j];\r\n    }\r\n\r\n    result.push(dict);\r\n  }\r\n\r\n  return result;\r\n};\r\n\r\n/**\r\n * Swap Dict Key-Value\r\n *\r\n * @example\r\n * swapDict({a: 1, b: 2})\r\n * => {'1': 'a', '2': 'b'}\r\n */\r\nconst swapDict = (obj: Record<any, any>) => {\r\n  return Object.keys(obj).reduce((obj_: Record<any, any>, key: any) => {\r\n    obj_[obj[key]] = key;\r\n    return obj_;\r\n  }, {});\r\n};\r\n\r\n/**\r\n * Get Upsert Dicts\r\n * @param olds - 원본 dicts\r\n * @param news - 출력 dicts\r\n * @param keys - (동일여부) 비교 대상 keys\r\n *\r\n * @example\r\n * const olds = [{a: 1, b: 2, c: 3}, {a: 4, b: 5, c: 6}, {a: 4, b: 6, c: 9}]\r\n * const news = [{a: 1, b: 2, d: 3}, {a: 4, b: 6, d: 8}, {a: 4, b: 8, d: 10}]\r\n * const keys = ['a', 'b']\r\n * let upserts = getUpsertDicts(olds, news, keys)\r\n * => upserts\r\n * upserts.adds = [{a: 4, b: 8, d: 10}]  // dicts exist in news, but not exist in olds for keys['a', 'b']. {a: 4, b: 8} is\r\n * upserts.dels = [{a: 4, b: 5, c: 6}]  // dicts not exist in news, but not exist in olds for keys['a', 'b']. {a: 4, b: 5} is in `news`, but is not in `olds`\r\n * upserts.upds = [{a: 1, b: 2, d: 3}, {a: 4, b: 6, d: 8}]  // dicts exist in news, and exist in olds for keys['a', 'b']. {a: 1, b: 2}, {a: 4, b: 6} are in `news`, `olds`.\r\n */\r\nfunction getUpsertDicts<T extends Record<string, any>>(\r\n  olds: T[] = [],\r\n  news: T[] = [],\r\n  keys: (keyof T)[]\r\n) {\r\n  const upserts = {\r\n    adds: [] as T[],\r\n    dels: [] as T[],\r\n    upds: [] as T[],\r\n  };\r\n\r\n  // Check for adds and upds dicts\r\n  news.forEach((newDict) => {\r\n    const matchingOldDict = olds.find((oldDict) =>\r\n      keys.every((key) => newDict[key] === oldDict[key])\r\n    );\r\n\r\n    if (!matchingOldDict) {\r\n      upserts.adds.push(newDict);\r\n    } else if (\r\n      !Object.entries(newDict).every(\r\n        ([key, value]) => matchingOldDict[key] === value\r\n      )\r\n    ) {\r\n      upserts.upds.push(newDict);\r\n    }\r\n  });\r\n\r\n  // Check for dels dicts\r\n  olds.forEach((oldDict) => {\r\n    const matchingNewDict = news.find((newDict) =>\r\n      keys.every((key) => oldDict[key] === newDict[key])\r\n    );\r\n\r\n    if (!matchingNewDict) {\r\n      upserts.dels.push(oldDict);\r\n    }\r\n  });\r\n\r\n  return upserts;\r\n}\r\n\r\n/**\r\n * Remove Keys From Dict\r\n * @param dict - 원본 dict\r\n * @param keys - 제거할 keys\r\n *\r\n * @example\r\n * removeDictKeys({a: 1, b: 2, c: 3}, ['a', 'c'])\r\n * => {b: 2}\r\n */\r\nconst removeDictKeys = (dict: any, keys: any[]) => {\r\n  for (let key of keys) {\r\n    delete dict[key];\r\n  }\r\n  return dict;\r\n};\r\n\r\n// * Data / Time\r\n/**\r\n * Convert date string to ko-KR(yyyy년 M월 d일 (요일))\r\n * @param {string} dateStr The function to delay.\r\n * @example\r\n *\r\n * dateKo('2023-07-15')\r\n * => 2023년 7월 15일 (토)\r\n */\r\nconst dateKo = (dateStr: string) =>\r\n  new Intl.DateTimeFormat('ko-KR', {\r\n    year: 'numeric',\r\n    month: 'numeric',\r\n    day: 'numeric',\r\n    weekday: 'short',\r\n  }).format(new Date(dateStr));\r\n\r\n/**\r\n * Get Now Date Time ()\r\n * @param {Object} options options\r\n *   - timeZone: default 'Asia/Seoul'\r\n *   - hour12: default false\r\n *   - format: 'basic'|'ko' default 'basic'\r\n * @returns {string} Returns detetime string.\r\n * @example\r\n *\r\n * now()\r\n * => 2023-07-16 14:27:37\r\n * now({format: 'ko'})\r\n * => 2023. 7. 16. (일) 14:28:57\r\n */\r\nconst now = (options: any) => {\r\n  const timeZone = options?.timeZone ?? 'Asia/Seoul';\r\n  const hour12 = options?.hour12 ?? false;\r\n  const format = options?.format ?? 'basic'; // yyyy-MM-dd hh:mm:ss\r\n  const date = new Date().toLocaleString('en-US', { timeZone, hour12 });\r\n  let now = new Date(date).toISOString().replace(/T/, ' ').replace(/\\..+/, '');\r\n\r\n  switch (format.toUpperCase()) {\r\n    case 'KO': // `2023년 7월 15일 (토) hh:mm:ss`\r\n      const [dateStr, timeStr] = now.split(' ');\r\n      now = `${dateKo(dateStr)} ${timeStr}`;\r\n      break;\r\n  }\r\n\r\n  return now;\r\n};\r\n\r\nconst timeFromTimestamp = (timestamp: number) => {\r\n  const date = new Date(timestamp);\r\n  return `${date.getFullYear()}${String(date.getMonth() + 1).padStart(2, '0')}${String(date.getDate()).padStart(2, '0')} ${date.getHours()}:${String(date.getMinutes()).padStart(2, '0')}:${String(date.getSeconds()).padStart(2, '0')}`;\r\n};\r\n\r\n/**\r\n * #source: https://github.com/lodash/lodash/blob/master/delay.js\r\n * Invokes `func` after `wait` milliseconds. Any additional arguments are\r\n * provided to `func` when it's invoked.\r\n * @param {Function} func The function to delay.\r\n * @param {number} wait The number of milliseconds to delay invocation.\r\n * @param {...*} [args] The arguments to invoke `func` with.\r\n * @returns {number} Returns the timer id.\r\n * @example\r\n *\r\n * delay(text => console.log(text), 1000, 'later')\r\n * // => Logs 'later' after one second.\r\n */\r\nconst delay = (func: (...args: any[]) => void, wait: number, ...args: any[]) => {\r\n  if (typeof func !== 'function') {\r\n    throw new TypeError('Expected a function');\r\n  }\r\n  return setTimeout(func, +wait || 0, ...args);\r\n};\r\n\r\n/**\r\n * Sleep For Second\r\n * @param sec\r\n */\r\nconst sleep = (sec: number) => {\r\n  let start = Date.now(),\r\n    now = start;\r\n  while (now - start < sec * 1000) {\r\n    now = Date.now();\r\n  }\r\n};\r\n\r\n/**\r\n * Sleep For `wait` milliseconds.\r\n * @param {number} wait The number of milliseconds to delay invocation.\r\n * @example\r\n *\r\n * console.log(new Date())\r\n * await sleep(1000);\r\n * console.log(new Date())\r\n * // => Logs 'later' after one second.\r\n */\r\nconst sleepAsync = async (wait: number) => {\r\n  await new Promise((resolve) => setTimeout(resolve, wait));\r\n};\r\n\r\n// & Export AREA\r\n// &---------------------------------------------------------------------------\r\nexport {\r\n  ping,\r\n  isEmptyDict,\r\n  isEmpty,\r\n  isFalsy,\r\n  isValidStr,\r\n  serializeNonPOJOs,\r\n  evalStr,\r\n  includesMulti,\r\n  strFromAny,\r\n  rowsFromCsv,\r\n  csvFromRows,\r\n  arrFromArrs,\r\n  popDict,\r\n  newKeys,\r\n  renameKeys,\r\n  overwriteKeys,\r\n  updateKeys,\r\n  arrFromDicts,\r\n  dictFromDuo,\r\n  dictsFromDuos,\r\n  duoFromDict,\r\n  rowsFromDicts,\r\n  dictsFromRows,\r\n  arrsFromDicts,\r\n  dictsFromArrs,\r\n  rowsAddedDefaults,\r\n  swapDict,\r\n  getUpsertDicts,\r\n  removeDictKeys,\r\n  dateKo,\r\n  now,\r\n  timeFromTimestamp,\r\n  delay,\r\n  sleep,\r\n  sleepAsync\r\n};"],"names":["ping","isEmptyDict","obj","JSON","stringify","isEmpty","v","isFalsy","undefined","Number","isNaN","Array","isArray","length","Object","keys","isValidStr","s","trim","serializeNonPOJOs","structuredClone","evalStr","str","values","regex","replace","match","expression","code","value","Function","includesMulti","arr","a","includes","strFromAny","rowsFromCsv","csv","sep","hasQuote","newline","rows","line","split","push","slice","map","csvFromRows","row","join","arrFromArrs","index","hasHeader","popDict","key","newKeys","maps","valMap","dfault","reduce","obj_","renameKeys","overwriteKeys","updateKeys","method","_obj","toLowerCase","arrFromDicts","dicts","dict","dictFromDuo","vals","i","dictsFromDuos","valss","duoFromDict","rowsAddedDefaults","isPush","addKeys","addVals","headerIndexArr","oldHeader","keyDuo","newHeader","indexArr","h","indexOf","dictsFromRows","header","indexMaps","shift","forEach","rowsFromDicts","_header","content","i_","arrsFromDicts","result","dictsFromArrs","arrs","j","swapDict","getUpsertDicts","olds","news","upserts","adds","dels","upds","newDict","matchingOldDict","find","oldDict","every","entries","matchingNewDict","removeDictKeys","dateKo","dateStr","Intl","DateTimeFormat","year","month","day","weekday","format","Date","now","options","timeZone","hour12","date","toLocaleString","toISOString","toUpperCase","timeStr","timeFromTimestamp","timestamp","getFullYear","String","getMonth","padStart","getDate","getHours","getMinutes","getSeconds","delay","func","wait","args","TypeError","setTimeout","sleep","sec","start","sleepAsync","Promise","resolve"],"mappings":"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"}