{"version":3,"sources":["../src/basic.ts"],"sourcesContent":["import type { Dict } from './types.js';\n\n// & Functions AREA\n// &---------------------------------------------------------------------------\n\n// * Test\n/**\n * 간단한 테스트용 함수\n * @returns 'pong'\n * \n * @example\n * ```ts\n * ping() // 'pong'\n * ```\n */\nconst ping = () => 'pong';\n\n// * Check Functions\n/**\n * 객체가 빈 객체(`{}`)인지 확인\n * @param obj 검사할 객체\n * @returns 빈 객체이면 true, 아니면 false\n * \n * @example\n * ```ts\n * isEmptyDict({}) // true\n * isEmptyDict({ a: 1 }) // false\n * ```\n */\nconst isEmptyDict = (obj: any) => JSON.stringify(obj) === '{}';\n\n/**\n * 객체가 빈 객체(`{}`) 또는 빈 배열(`[]`)인지 확인\n * @param v 검사할 값\n * @returns 빈 객체/배열이면 true, 아니면 false\n * \n * @example\n * ```ts\n * isEmpty({}) // true\n * isEmpty([]) // true\n * isEmpty({ a: 1 }) // false\n * ```\n */\nconst isEmpty = (v: any) => JSON.stringify(v) === '{}' || JSON.stringify(v) === '[]';\n\n/**\n * Falsy 값인지 확인\n * @param v 검사할 값\n * @returns Falsy이면 true, 아니면 false\n * \n * @example\n * ```ts\n * isFalsy(false) // true\n * isFalsy(undefined) // true\n * isFalsy(null) // true\n * isFalsy(0) // true\n * isFalsy('') // true\n * isFalsy({}) // true\n * ```\n */\nconst isFalsy = (v: any) => {\n  if (v === true) return false;\n  if (typeof v === 'number' && v !== 0) return false;\n  \n  return (\n    v === false ||\n    v === undefined ||\n    v === null ||\n    Number.isNaN(v) ||\n    v === 0 ||\n    v === '' ||\n    (Array.isArray(v) && v.length === 0) ||\n    (typeof v === 'object' && v !== null && Object.keys(v).length === 0)\n  );\n};\n\n/**\n * 유효한 문자열인지 확인\n * @param s 검사할 문자열\n * @returns 유효한 문자열이면 true, 아니면 false\n * \n * @example\n * ```ts\n * isValidStr('hello') // true\n * isValidStr('') // false\n * isValidStr(null) // false\n * ```\n */\nconst isValidStr = (s: any) => {\n  if (s === null || s === undefined || typeof s !== 'string') {\n    return false;\n  }\n  return s.trim() !== '';\n};\n\n// * Convert Functions\n/**\n * NonPOJO 객체를 POJO 객체로 변환\n * @param obj 변환할 객체\n * @returns POJO 객체\n */\nconst serializeNonPOJOs = (obj: any) => structuredClone(obj);\n\n// * String Functions\n/**\n * 문자열 내의 표현식(`${expression}`) 평가\n * @param str 평가할 문자열\n * @param values 표현식에 사용할 값들\n * @returns 평가된 문자열\n * \n * @example\n * ```ts\n * evalStr('${i + j}', { i: 1, j: 2 }) // '3'\n * ```\n */\nconst evalStr = (str: string, values: Dict) => {\n  const regex = /\\${(.*?)}/g;\n  return str.replace(regex, (match, expression) => {\n    const code = `return ${expression}`;\n    const value = new Function(...Object.keys(values), code)(...Object.values(values));\n    return value;\n  });\n};\n\n/**\n * 문자열이 배열의 요소 중 하나를 포함하는지 확인\n * @param s 검사할 문자열\n * @param arr 검사할 문자열 배열\n * @returns 포함하면 true, 아니면 false\n * \n * @example\n * ```ts\n * includesMulti('hello world', ['hello', 'hi']) // true\n * ```\n */\nconst includesMulti = (s: string, arr: string[]) => {\n  for (const a of arr) {\n    if (s.includes(a)) return true;\n  }\n  return false;\n};\n\n/**\n * 어떤 타입의 값을 문자열로 변환\n * @param s 변환할 값\n * @returns 변환된 문자열\n * \n * @example\n * ```ts\n * strFromAny(123) // '123'\n * strFromAny({ a: 1 }) // '{\"a\":1}'\n * ```\n */\nconst strFromAny = (s: any) => typeof s === 'string' ? s.trim() : JSON.stringify(s);\n\n// * CSV Functions\n/**\n * CSV 문자열을 2차원 배열로 변환\n * @param csv CSV 문자열\n * @param sep 구분자 (기본값: ',')\n * @param hasQuote 따옴표 포함 여부 (기본값: true)\n * @param newline 줄바꿈 문자 (기본값: '\\n')\n * @returns 2차원 배열\n * \n * @example\n * ```ts\n * rowsFromCsv('\"a\",\"b\"\\n\"1\",\"2\"') // [['a','b'], ['1','2']]\n * ```\n */\nconst rowsFromCsv = (csv: string, sep = ',', hasQuote = true, newline = '\\n') => {\n  const rows: string[][] = [];\n  for (const line of csv.split(newline)) {\n    if (hasQuote) {\n      rows.push(line.slice(1, -1).split(`\"${sep}\"`).map(s => s.trim()));\n    } else {\n      rows.push(line.split(sep).map(s => s.trim()));\n    }\n  }\n  return rows;\n};\n\n/**\n * 2차원 배열을 CSV 문자열로 변환\n * @param rows 2차원 배열\n * @param sep 구분자 (기본값: ',')\n * @param hasQuote 따옴표 포함 여부 (기본값: true)\n * @param newline 줄바꿈 문자 (기본값: '\\n')\n * @returns CSV 문자열\n * \n * @example\n * ```ts\n * csvFromRows([['a','b'], ['1','2']]) // '\"a\",\"b\"\\n\"1\",\"2\"'\n * ```\n */\nconst csvFromRows = (rows: any[][], sep = ',', hasQuote = true, newline = '\\n') => {\n  let str = '';\n  for (const row of rows) {\n    if (hasQuote) {\n      str += `\"${row.join('\"' + sep + '\"')}\"${newline}`;\n    } else {\n      str += `${row.join(sep)}${newline}`;\n    }\n  }\n  return str;\n};\n\n// * Array Functions\n/**\n * 2차원 배열에서 특정 인덱스의 값들을 추출\n * @param rows 2차원 배열\n * @param index 추출할 인덱스\n * @param hasHeader 헤더 포함 여부\n * @returns 추출된 1차원 배열\n * \n * @example\n * ```ts\n * arrFromArrs([[1,2], [3,4]], 1) // [2,4]\n * ```\n */\nconst arrFromArrs = (rows: any[][], index = 0, hasHeader = false) => {\n  const arr = rows.map(row => row[index]);\n  return hasHeader ? arr.slice(1) : arr;\n};\n\n// * Dictionary Functions\n/**\n * 객체에서 특정 키를 제거\n * @param obj 대상 객체\n * @param key 제거할 키\n * @returns 키가 제거된 객체\n * \n * @example\n * ```ts\n * popDict({a:1, b:2}, 'a') // {b:2}\n * ```\n */\nconst popDict = (obj: Dict, key: string) => {\n  delete obj[key];\n  return obj;\n};\n\n/**\n * New Dict Keys(maps의 key들에 대해, 변경된 key 이름으로 dict 생성)\n * @param obj - dict\n * @param maps - mapping dict for rename keys\n * @param valMap - obj에 없는 key(maps에만 있는)에 대한 default값\n * @param dfault - valMap에 없을 때의 default값\n *\n * @example\n * newKeys({ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 'a1', 'c': 'c1', 'd': 'd1' }, {'d1': ''})\n * => { a1: 1, c1: 3, d1: '' }\n */\nconst newKeys = (\n  obj: Record<string, any>,\n  maps: Record<string, string>,\n  valMap: Record<string, any>,\n  dfault = ''\n) => {\n  return Object.keys(maps).reduce(function (obj_, key) {\n    obj_[maps[key]] = obj[key] ?? valMap[key] ?? dfault;\n    return obj_;\n  }, {} as Record<string, any>);\n};\n\n/**\n * Rename Dict Keys(obj의 key들에 대한 이름 변경(변경 되지 않은 것은 유지))\n * @param obj - dict\n * @param maps - mapping dict for rename keys\n *\n * @example\n * renameKeys({ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 'a1', 'c': 'c1', 'd': 'd1' })\n * =>\n * { a1: 1, b: 2, c1: 3 }\n */\nconst renameKeys = (obj: Record<string, any>, maps: Record<string, string>) => {\n  return Object.keys(obj).reduce(function (obj_, key) {\n    obj_[maps[key] ?? key] = obj[key];\n    return obj_;\n  }, {} as Record<string, any>);\n};\n\n/**\n * Overwrite Dict Keys(newKeys(신규 key 추가) + rename(key 이름 변경))\n * @param obj - dict\n * @param maps - mapping dict for rename keys\n * @param valMap - obj에 없는 key(maps에만 있는)에 대한 default값\n * @param dfault - valMap에 없을 때의 default값\n *\n * @example\n * overwriteKeys({ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 'a1', 'c': 'c1', 'd': 'd1' }, {'d1': ''})\n * =>\n *  { a1: 1, b: 2, c1: 3, d1: '' }\n */\nconst overwriteKeys = (\n  obj: Record<string, any>,\n  maps: Record<string, string>,\n  valMap: Record<string, any>,\n  dfault = ''\n) => {\n  return Object.keys({ ...obj, ...valMap }).reduce(function (obj_, key) {\n    obj_[maps[key] ?? key] = obj[key] ?? valMap[key] ?? dfault;\n    return obj_;\n  }, {} as Record<string, any>);\n};\n\n/**\n * Update Dict Keys\n * @param obj - dict\n * @param maps - mapping dict for rename keys\n * @param valMap - obj에 없는 key(maps에만 있는)에 대한 default값\n * @param dfault - valMap에 없을 때의 default값\n * @param method\n *  - new: maps의 key들로만 신규 생성\n *  - rename: obj의 key들에 대한 이름 변경(변경 되지 않은 것은 유지)\n *  - update: new + update(obj 이름 변경, 신규 key 추가)\n *\n * @example\n * const dict = { 'a': 1, 'b': 2, 'c': 3 }\n * const maps = { 'a': 'a1', 'c': 'c1', 'd': 'd1' }\n * const valMap = {'d1': ''}\n * const method = 'new' | 'rename' | 'update';\n * updateKeys(dict, maps, valMap, method)\n * =>\n * - { a1: 1, c1: 3, d1: '' } <= method = 'new'\n * - { a1: 1, b: 2, c1: 3 } <= method = 'rename'\n * - { a1: 1, b: 2, c1: 3, d1: '' } <= method = 'update'\n */\nconst updateKeys = (\n  obj: Record<string, any>,\n  maps: Record<string, string>,\n  valMap: Record<string, any>,\n  dfault = '',\n  method = 'new'\n) => {\n  let _obj = maps; // method: `new`\n  switch (method.toLowerCase()) {\n    case 'rename':\n      _obj = obj;\n      break;\n    case 'update':\n      _obj = { ...obj, ...valMap };\n      break;\n  }\n\n  return Object.keys(_obj).reduce(function (obj_, key) {\n    obj_[maps[key] ?? key] = obj[key] ?? valMap[key] ?? dfault;\n    return obj_;\n  }, {} as Record<string, any>);\n};\n\n/**\n * Arr From Dicts(Extract array By Key)\n * @param dicts - source dicts\n *\n * @example\n *  arrFromDicts([{'h1': 'v11', 'h1': 'v12'}, {'h1': 'v21', 'h1': 'v22'}], 'h1')\n *   => ['v11', 'v21']\n */\nconst arrFromDicts = (dicts: any[], key: string) => {\n  return dicts.map((dict) => dict[key]);\n};\n\n/**\n * Returns Dict(object) From Duo(Keys, Vals)\n * @param keys - dict keys\n * @param vals - dict values\n *\n * @example\n * dictFromDuo(['a', 'b'], [1, 2]))\n *  => {'a': 1, 'b': 2}\n * ```\n */\nconst dictFromDuo = (keys: any[], vals: any[]) => {\n  return keys.reduce((dict, key, i) => {\n    dict[key] = vals[i];\n    return dict;\n  }, {});\n};\n\n/**\n * Returns Dicts(objects) From Duos(Keys, Valss)\n * @param keys - dict keys\n * @param vals - array of values\n *\n * @example\n * dictFromDuo(['a', 'b'], [[1, 2], [3,4]])\n *  => [{'a': 1, 'b': 2}, {'a': 3, 'b': 4}]\n */\nconst dictsFromDuos = (keys: any[], valss: any[][]) => {\n  return valss.map((vals) =>\n    keys.reduce((dict, key, i) => {\n      dict[key] = vals[i];\n      return dict;\n    }, {})\n  );\n};\n\n/**\n * Duo From Dict\n * @param obj - source dict\n * @example\n * duoFromDict({'h1': 'v11', 'h1': 'v12'})\n *  => [['h1', 'h2'], ['v11', 'v12']]\n */\nconst duoFromDict = (obj: any) => {\n  if (obj === null || typeof obj !== 'object') {\n    return [];\n  }\n  return [Object.keys(obj), Object.values(obj)];\n};\n\n/**\n * Rows Added Default Values\n * @param rows - given rows\n * @param valMap - added default values\n * @param isPush -\n *\n * @example\n *  rowsAddedDefaults([['h1', 'h2'], ['v11', 'v12'], ['v21', 'v22']], {'h3': ''}, false)\n *  => [['h1', 'h2', 'h3'], ['v11', 'v12', ''], ['v21', 'v22', '']]\n */\nconst rowsAddedDefaults = (rows: any[], valMap = {}, isPush = false) => {\n  const addKeys = Object.keys(valMap);\n  const addVals = Object.values(valMap);\n  if (isPush) {\n    return rows.map((arr, i) =>\n      i === 0 ? [...arr, ...addKeys] : [...arr, ...addVals]\n    );\n  } else {\n    return rows.map((arr, i) =>\n      i === 0 ? [...addKeys, ...arr] : [...addVals, ...arr]\n    );\n  }\n};\n\n/**\n * headerIndexArr\n *   - newKeys\n *   - keyDuo의 key에 해당하는 oldHeader의 index(-1: oldHeader에는 없는 key)\n * @param oldHeader - source rows\n * @param keyDuo - key mapping [['oldKey1', ...], ['newKey1', ...]]\n * @example\n * headerIndexArr(['h1', 'h2', 'h3'],  [['h3', 'h4', 'h1'], ['_h3', '_h4', '_h1']])\n *  => [['_h3', '_h4', '_h1'], [2, -1, 0]]\n */\nconst headerIndexArr = (oldHeader: any[], keyDuo: any[][] = [[]]) => {\n  let newHeader = oldHeader;\n  let indexArr = [...Array(oldHeader.length).keys()];\n  if (keyDuo[0].length > 0) {\n    newHeader = keyDuo[1];\n    indexArr = keyDuo[0].map((h) => oldHeader.indexOf(h));\n  }\n  return [newHeader, indexArr];\n};\n\n/**\n * Dicts From Rows\n * @param rows - source rows\n * @param keyDuo - key mapping [['oldKey1', ...], ['newKey1', ...]]\n * @param dfault - rows에 없는 key인 경우 default값\n * @example\n * dictsFromRows([['h1', 'h2'], ['v11', 'v12'], ['v21', 'v22']],  [['h2', 'h3', 'h1'], ['_h2', '_h3', '_h1']])\n *  => [{ _h2: 'v12', _h3: '', _h1: 'v11' }, { _h2: 'v22', _h3: '', _h1: 'v21' }]  // 순서는 의미가 없을 수 있음\n */\nconst dictsFromRows = (rows: any[][], keyDuo: any[][] = [[]], dfault = '') => {\n  if (!rows || rows.length == 0) {\n    return [];\n  }\n  let [header, indexMaps] = headerIndexArr(rows.shift()!, keyDuo);\n\n  return rows.map((arr) => {\n    let dict: any = {};\n    header.forEach((h: any, i: number) => {\n      dict[h] = indexMaps[i] != -1 ? arr[indexMaps[i]] ?? dfault : dfault;\n    });\n    return dict;\n  });\n};\n\n/**\n * Rows From Dicts\n * @param dicts - source dicts\n * @param keyDuo - key mapping [['oldKey1', ...], ['newKey1', ...]]\n * @param dfault - rows에 없는 key인 경우 default값\n * @example\n * rowsFromDicts([{'h1': 'v11', 'h2': 'v12', 'h3': 'v13'}, {'h1': 'v21', 'h2': 'v22', 'h3': 'v13'}], [['h3', 'h4', 'h1'], ['_h3', '_h4', '_h1']], '_v_')\n *  => [[ '_h3', '_h4', '_h1' ], [ 'v13', '_v_', 'v11' ], [ 'v13', '_v_', 'v21' ]]\n */\nconst rowsFromDicts = (dicts: any[], keyDuo: any[][] = [[]], dfault = '') => {\n  if (!dicts || dicts.length == 0) {\n    return [];\n  }\n\n  const _header = Object.keys(dicts[0]);\n  let [header, indexMaps] = headerIndexArr(_header, keyDuo);\n\n  let rows: any[][] = [header];\n  for (let row of dicts) {\n    let content: any[] = [];\n    for (let i = 0; i < header.length; i++) {\n      const i_ = indexMaps[i];\n      i_ == -1 ? content.push(dfault) : content.push(row[_header[i_]]);\n    }\n    rows.push(content);\n  }\n  return rows;\n};\n\n/**\n * Arrs From Dicts\n */\nconst arrsFromDicts = (dicts: Record<any, any>[]): any[][] => {\n  const keys = Object.keys(dicts[0]);\n  const result: any[][] = [keys];\n\n  for (const dict of dicts) {\n    const values: any[] = [];\n\n    for (const key of keys) {\n      values.push(dict[key]);\n    }\n\n    result.push(values);\n  }\n\n  return result;\n};\n\n/**\n * Dicts From Arrs\n */\nconst dictsFromArrs = (arrs: any[][]): Record<any, any>[] => {\n  const keys = arrs[0];\n  const result: Record<any, any>[] = [];\n\n  for (let i = 1; i < arrs.length; i++) {\n    const values = arrs[i];\n    const dict: Record<any, any> = {};\n\n    for (let j = 0; j < keys.length; j++) {\n      dict[keys[j]] = values[j];\n    }\n\n    result.push(dict);\n  }\n\n  return result;\n};\n\n/**\n * Swap Dict Key-Value\n *\n * @example\n * swapDict({a: 1, b: 2})\n * => {'1': 'a', '2': 'b'}\n */\nconst swapDict = (obj: Record<any, any>) => {\n  return Object.keys(obj).reduce((obj_: Record<any, any>, key: any) => {\n    obj_[obj[key]] = key;\n    return obj_;\n  }, {});\n};\n\n/**\n * Get Upsert Dicts\n * @param olds - 원본 dicts\n * @param news - 출력 dicts\n * @param keys - (동일여부) 비교 대상 keys\n *\n * @example\n * const olds = [{a: 1, b: 2, c: 3}, {a: 4, b: 5, c: 6}, {a: 4, b: 6, c: 9}]\n * const news = [{a: 1, b: 2, d: 3}, {a: 4, b: 6, d: 8}, {a: 4, b: 8, d: 10}]\n * const keys = ['a', 'b']\n * let upserts = getUpsertDicts(olds, news, keys)\n * => upserts\n * upserts.adds = [{a: 4, b: 8, d: 10}]  // dicts exist in news, but not exist in olds for keys['a', 'b']. {a: 4, b: 8} is\n * upserts.dels = [{a: 4, b: 5, c: 6}]  // dicts not exist in news, but not exist in olds for keys['a', 'b']. {a: 4, b: 5} is in `news`, but is not in `olds`\n * upserts.upds = [{a: 1, b: 2, d: 3}, {a: 4, b: 6, d: 8}]  // dicts exist in news, and exist in olds for keys['a', 'b']. {a: 1, b: 2}, {a: 4, b: 6} are in `news`, `olds`.\n */\nfunction getUpsertDicts<T extends Record<string, any>>(\n  olds: T[] = [],\n  news: T[] = [],\n  keys: (keyof T)[]\n) {\n  const upserts = {\n    adds: [] as T[],\n    dels: [] as T[],\n    upds: [] as T[],\n  };\n\n  // Check for adds and upds dicts\n  news.forEach((newDict) => {\n    const matchingOldDict = olds.find((oldDict) =>\n      keys.every((key) => newDict[key] === oldDict[key])\n    );\n\n    if (!matchingOldDict) {\n      upserts.adds.push(newDict);\n    } else if (\n      !Object.entries(newDict).every(\n        ([key, value]) => matchingOldDict[key] === value\n      )\n    ) {\n      upserts.upds.push(newDict);\n    }\n  });\n\n  // Check for dels dicts\n  olds.forEach((oldDict) => {\n    const matchingNewDict = news.find((newDict) =>\n      keys.every((key) => oldDict[key] === newDict[key])\n    );\n\n    if (!matchingNewDict) {\n      upserts.dels.push(oldDict);\n    }\n  });\n\n  return upserts;\n}\n\n/**\n * Remove Keys From Dict\n * @param dict - 원본 dict\n * @param keys - 제거할 keys\n *\n * @example\n * removeDictKeys({a: 1, b: 2, c: 3}, ['a', 'c'])\n * => {b: 2}\n */\nconst removeDictKeys = (dict: any, keys: any[]) => {\n  for (let key of keys) {\n    delete dict[key];\n  }\n  return dict;\n};\n\n// * Data / Time\n/**\n * Convert date string to ko-KR(yyyy년 M월 d일 (요일))\n * @param {string} dateStr The function to delay.\n * @example\n *\n * dateKo('2023-07-15')\n * => 2023년 7월 15일 (토)\n */\nconst dateKo = (dateStr: string) =>\n  new Intl.DateTimeFormat('ko-KR', {\n    year: 'numeric',\n    month: 'numeric',\n    day: 'numeric',\n    weekday: 'short',\n  }).format(new Date(dateStr));\n\n/**\n * Get Now Date Time ()\n * @param {Object} options options\n *   - timeZone: default 'Asia/Seoul'\n *   - hour12: default false\n *   - format: 'basic'|'ko' default 'basic'\n * @returns {string} Returns detetime string.\n * @example\n *\n * now()\n * => 2023-07-16 14:27:37\n * now({format: 'ko'})\n * => 2023. 7. 16. (일) 14:28:57\n */\nconst now = (options: any) => {\n  const timeZone = options?.timeZone ?? 'Asia/Seoul';\n  const hour12 = options?.hour12 ?? false;\n  const format = options?.format ?? 'basic'; // yyyy-MM-dd hh:mm:ss\n  const date = new Date().toLocaleString('en-US', { timeZone, hour12 });\n  let now = new Date(date).toISOString().replace(/T/, ' ').replace(/\\..+/, '');\n\n  switch (format.toUpperCase()) {\n    case 'KO': // `2023년 7월 15일 (토) hh:mm:ss`\n      const [dateStr, timeStr] = now.split(' ');\n      now = `${dateKo(dateStr)} ${timeStr}`;\n      break;\n  }\n\n  return now;\n};\n\nconst timeFromTimestamp = (timestamp: number) => {\n  const date = new Date(timestamp);\n  return `${date.getFullYear()}${String(date.getMonth() + 1).padStart(2, '0')}${String(date.getDate()).padStart(2, '0')} ${date.getHours()}:${String(date.getMinutes()).padStart(2, '0')}:${String(date.getSeconds()).padStart(2, '0')}`;\n};\n\n/**\n * #source: https://github.com/lodash/lodash/blob/master/delay.js\n * Invokes `func` after `wait` milliseconds. Any additional arguments are\n * provided to `func` when it's invoked.\n * @param {Function} func The function to delay.\n * @param {number} wait The number of milliseconds to delay invocation.\n * @param {...*} [args] The arguments to invoke `func` with.\n * @returns {number} Returns the timer id.\n * @example\n *\n * delay(text => console.log(text), 1000, 'later')\n * // => Logs 'later' after one second.\n */\nconst delay = (func: (...args: any[]) => void, wait: number, ...args: any[]) => {\n  if (typeof func !== 'function') {\n    throw new TypeError('Expected a function');\n  }\n  return setTimeout(func, +wait || 0, ...args);\n};\n\n/**\n * Sleep For Second\n * @param sec\n */\nconst sleep = (sec: number) => {\n  let start = Date.now(),\n    now = start;\n  while (now - start < sec * 1000) {\n    now = Date.now();\n  }\n};\n\n/**\n * Sleep For `wait` milliseconds.\n * @param {number} wait The number of milliseconds to delay invocation.\n * @example\n *\n * console.log(new Date())\n * await sleep(1000);\n * console.log(new Date())\n * // => Logs 'later' after one second.\n */\nconst sleepAsync = async (wait: number) => {\n  await new Promise((resolve) => setTimeout(resolve, wait));\n};\n\n// & Export AREA\n// &---------------------------------------------------------------------------\nexport {\n  ping,\n  isEmptyDict,\n  isEmpty,\n  isFalsy,\n  isValidStr,\n  serializeNonPOJOs,\n  evalStr,\n  includesMulti,\n  strFromAny,\n  rowsFromCsv,\n  csvFromRows,\n  arrFromArrs,\n  popDict,\n  newKeys,\n  renameKeys,\n  overwriteKeys,\n  updateKeys,\n  arrFromDicts,\n  dictFromDuo,\n  dictsFromDuos,\n  duoFromDict,\n  rowsFromDicts,\n  dictsFromRows,\n  arrsFromDicts,\n  dictsFromArrs,\n  rowsAddedDefaults,\n  swapDict,\n  getUpsertDicts,\n  removeDictKeys,\n  dateKo,\n  now,\n  timeFromTimestamp,\n  delay,\n  sleep,\n  sleepAsync\n};"],"names":["ping","isEmptyDict","obj","JSON","stringify","isEmpty","v","isFalsy","undefined","Number","isNaN","Array","isArray","length","Object","keys","isValidStr","s","trim","serializeNonPOJOs","structuredClone","evalStr","str","values","regex","replace","match","expression","code","value","Function","includesMulti","arr","a","includes","strFromAny","rowsFromCsv","csv","sep","hasQuote","newline","rows","line","split","push","slice","map","csvFromRows","row","join","arrFromArrs","index","hasHeader","popDict","key","newKeys","maps","valMap","dfault","reduce","obj_","renameKeys","overwriteKeys","updateKeys","method","_obj","toLowerCase","arrFromDicts","dicts","dict","dictFromDuo","vals","i","dictsFromDuos","valss","duoFromDict","rowsAddedDefaults","isPush","addKeys","addVals","headerIndexArr","oldHeader","keyDuo","newHeader","indexArr","h","indexOf","dictsFromRows","header","indexMaps","shift","forEach","rowsFromDicts","_header","content","i_","arrsFromDicts","result","dictsFromArrs","arrs","j","swapDict","getUpsertDicts","olds","news","upserts","adds","dels","upds","newDict","matchingOldDict","find","oldDict","every","entries","matchingNewDict","removeDictKeys","dateKo","dateStr","Intl","DateTimeFormat","year","month","day","weekday","format","Date","now","options","timeZone","hour12","date","toLocaleString","toISOString","toUpperCase","timeStr","timeFromTimestamp","timestamp","getFullYear","String","getMonth","padStart","getDate","getHours","getMinutes","getSeconds","delay","func","wait","args","TypeError","setTimeout","sleep","sec","start","sleepAsync","Promise","resolve"],"mappings":"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"}