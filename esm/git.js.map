{"version":3,"sources":["../src/git.ts"],"sourcesContent":["/** Github\r\n * References\r\n *   - [create repository](https://octokit.github.io/rest.js/v19#repos-create-for-authenticated-user)\r\n */\r\n\r\n// & Import AREA\r\n// &---------------------------------------------------------------------------\r\nimport Path from 'path';\r\n\r\n// ? External Modules\r\nimport { execSync } from 'child_process';\r\nimport { Octokit } from '@octokit/rest';\r\n\r\n// ? Internal Modules\r\nimport { loadJson } from './builtin.js';\r\nimport { sleep } from './basic.js';\r\nimport { PLATFORM } from './cli.js';\r\n\r\n// & Types AREA\r\n// &---------------------------------------------------------------------------\r\nimport type { GithubAccount, RepoOptions } from './types.js';\r\n\r\n// & Variables AREA\r\n// &---------------------------------------------------------------------------\r\nconst settingsPath = `${process.env.DEV_CONFIG_ROOT}/Environments` ?? 'C:/JnJ-soft/Developments/Environments';\r\n\r\n// & Functions AREA\r\n// &---------------------------------------------------------------------------\r\n/**\r\n * Github 계정 정보 조회\r\n * @param userName - Github 사용자명\r\n * @returns Github 계정 정보\r\n *\r\n * @example\r\n * ```ts\r\n * const account = findGithubAccount('username');\r\n * ```\r\n */\r\nconst findGithubAccount = (userName: string): GithubAccount => {\r\n  return loadJson(`${settingsPath}/Apis/github.json`)[userName];\r\n};\r\n\r\n/**\r\n * 모든 저장소 목록 조회\r\n */\r\nconst findAllRepos = (octokit: Octokit) => {\r\n  console.log(octokit.rest.repos);\r\n};\r\n\r\n/**\r\n * 새 저장소 생성\r\n */\r\nconst createRemoteRepo = (octokit: Octokit, options: RepoOptions) => {\r\n  console.log('#### createRemoteRepo options: ', options);\r\n  const defaults = {\r\n    auto_init: true,\r\n    private: false,\r\n    license_template: 'MIT',\r\n  };\r\n  return octokit.rest.repos.createForAuthenticatedUser({\r\n    ...defaults,\r\n    ...options,\r\n  });\r\n};\r\n\r\n/**\r\n * 빈 저장소 생성\r\n */\r\nconst createRemoteRepoEmpty = (octokit: Octokit, options: RepoOptions) => {\r\n  console.log('#### createRemoteRepoEmpty options: ', options);\r\n  return createRemoteRepo(octokit, {\r\n    ...options,\r\n    auto_init: false,\r\n    license_template: undefined,\r\n  });\r\n};\r\n\r\n/**\r\n * 저장소 삭제\r\n */\r\nconst deleteRemoteRepo = (octokit: Octokit, options: RepoOptions, account: GithubAccount) => {\r\n  const { name } = options;\r\n  return octokit.rest.repos.delete({\r\n    owner: account.userName,\r\n    repo: name,\r\n  });\r\n};\r\n\r\n/**\r\n * Git 설정 변경\r\n */\r\nconst setLocalConfig = (options: RepoOptions, account: GithubAccount, localPath: string) => {\r\n  let cmd = `cd ${localPath} && git config user.name \"${account.fullName}\"`;\r\n  cmd += ` && git config user.email \"${account.email}\"`;\r\n  cmd += ` && git remote set-url origin https://${account.token}@github.com/${account.userName}/${options.name}.git`;\r\n  console.log(cmd);\r\n  execSync(cmd);\r\n};\r\n\r\n/**\r\n * 로컬 저장소 초기화\r\n */\r\nconst initLocalRepo = (options: RepoOptions, account: GithubAccount, localPath: string) => {\r\n  const { name } = options;\r\n  const { fullName, email, token, userName } = account;\r\n\r\n  let cmd = `cd ${localPath} && git init`;\r\n  cmd += ` && git config user.name \"${fullName}\"`;\r\n  cmd += ` && git config user.email \"${email}\"`;\r\n  // cmd += ` && git remote add origin https://${token}@github.com/${userName}/${name}.git`;\r\n  cmd += ` && git remote set-url origin https://${account.token}@github.com/${account.userName}/${options.name}.git`;\r\n  cmd += ` && git add . && git commit -m \"Initial commit\"`;\r\n  console.log(cmd);\r\n  execSync(cmd);\r\n};\r\n\r\n/**\r\n * 저장소 복제\r\n */\r\nconst cloneRepo = (options: RepoOptions, account: GithubAccount, localPath: string) => {\r\n  const cmd = `cd ${Path.dirname(localPath)} && git clone https://${account.token}@github.com/${account.userName}/${\r\n    options.name\r\n  }.git`;\r\n  console.log(cmd);\r\n  execSync(cmd);\r\n};\r\n\r\n/**\r\n * 저장소 초기화 (생성, 복제, 설정)\r\n */\r\nconst initRepo = (octokit: Octokit, options: RepoOptions, account: GithubAccount, localPath: string) => {\r\n  console.log('====GIT.TS initRepo');\r\n\r\n  // createRemoteRepo(octokit, options); // !! 원격 저장소 생성 안됨\r\n  let cmd = `xgit -e createRemoteRepo -u ${account.userName} -n ${options.name}`;\r\n  console.log(`initRepo cmd: ${cmd}`);\r\n  execSync(cmd);\r\n  sleep(5);\r\n  cloneRepo(options, account, localPath);\r\n  sleep(5);\r\n  setLocalConfig(options, account, localPath);\r\n};\r\n\r\n/**\r\n * 저장소 복제 및 설정\r\n */\r\nconst copyRepo = (options: RepoOptions, account: GithubAccount, localPath: string) => {\r\n  cloneRepo(options, account, localPath);\r\n  sleep(10);\r\n  setLocalConfig(options, account, localPath);\r\n};\r\n\r\n/**\r\n * 저장소에 변경사항 푸시\r\n */\r\nconst pushRepo = (options: RepoOptions, account: GithubAccount, localPath: string) => {\r\n  execSync(`cd ${localPath}`);\r\n  const branches = execSync('git branch');\r\n  console.log(`#### pushRepo branches: ${branches}`);\r\n  if (branches.includes('main')) {\r\n    // execSync(`git push https://${account.token}@github.com/${account.userName}/${options.name}.git main`);\r\n    execSync('git push -u origin main');\r\n  } else if (branches.includes('master')) {\r\n    execSync('git push -u origin master');\r\n  } else {\r\n    console.log('main 또는 master 브랜치가 없습니다.');\r\n  }\r\n};\r\n\r\n/**\r\n * 새 저장소 생성 및 초기 커밋\r\n */\r\nconst makeRepo = (octokit: Octokit, options: RepoOptions, account: GithubAccount, localPath: string) => {\r\n  // // 빈 저장소 생성\r\n  // console.log(`=================== createRemoteRepoEmpty: ${localPath}`);\r\n  // createRemoteRepoEmpty(octokit, options);\r\n  // createRemoteRepo(octokit, options);\r\n  let cmd = `xgit -e createRemoteRepo -u ${account.userName} -n ${options.name}`;\r\n  console.log(`initRepo cmd: ${cmd}`);\r\n  execSync(cmd);\r\n  sleep(15);\r\n  // 로컬 저장소 초기화\r\n  console.log(`=================== initLocalRepo: ${localPath}`);\r\n  initLocalRepo(options, account, localPath);\r\n  sleep(3);\r\n  // 로컬 저장소 디렉토리로 이동\r\n  // execSync(`cd ${localPath}`);\r\n  // 초기 커밋 및 푸시\r\n  console.log(`=================== pushRepo: ${localPath}`);\r\n  pushRepo(options, account, localPath);\r\n};\r\n\r\n/**\r\n * 로컬 + 원격 저장소 삭제\r\n * @param options - 저장소 옵션\r\n */\r\nconst removeRepo = (octokit: Octokit, options: RepoOptions, account: GithubAccount, localPath: string) => {\r\n  deleteRemoteRepo(octokit, options, account);\r\n  const { name } = options;\r\n  // 로컬 저장소 부모 디렉토리로 이동\r\n  execSync(`cd ${Path.dirname(localPath)}`);\r\n\r\n  if (PLATFORM === 'win') {\r\n    const cmd = `rmdir /s /q ${name}`;\r\n    console.log(cmd);\r\n    execSync(cmd);\r\n  } else {\r\n    const cmd = `rm -rf ${name}`;\r\n    console.log(cmd);\r\n    execSync(cmd);\r\n  }\r\n};\r\n\r\n// & Export AREA\r\n// &---------------------------------------------------------------------------\r\nexport {\r\n  findGithubAccount,\r\n  findAllRepos,\r\n  createRemoteRepo,\r\n  createRemoteRepoEmpty,\r\n  deleteRemoteRepo,\r\n  cloneRepo,\r\n  setLocalConfig,\r\n  initLocalRepo,\r\n  initRepo,\r\n  copyRepo,\r\n  pushRepo,\r\n  makeRepo,\r\n  removeRepo,\r\n};\r\n"],"names":["Path","execSync","loadJson","sleep","PLATFORM","settingsPath","process","env","DEV_CONFIG_ROOT","findGithubAccount","userName","findAllRepos","octokit","console","log","rest","repos","createRemoteRepo","options","defaults","auto_init","private","license_template","createForAuthenticatedUser","createRemoteRepoEmpty","undefined","deleteRemoteRepo","account","name","delete","owner","repo","setLocalConfig","localPath","cmd","fullName","email","token","initLocalRepo","cloneRepo","dirname","initRepo","copyRepo","pushRepo","branches","includes","makeRepo","removeRepo"],"mappings":"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"}