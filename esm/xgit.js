#!/usr/bin/env node
var e;let o;import{Octokit as r}from"@octokit/rest";import i from"yargs";import{findGithubAccount as a,createRemoteRepo as p,createRemoteRepoEmpty as t,setLocalConfig as s,cloneRepo as n,initLocalRepo as c,deleteRemoteRepo as m,initRepo as d,copyRepo as l,pushRepo as N,makeRepo as R,removeRepo as b}from"./git.js";import{getCurrentDir as k}from"./cli.js";let u=i.usage("Usage: -u <url> -s <keyword>").option("e",{alias:"exec",default:"copyRepo",describe:"exec command copyRepo(clone+local config)/makeRepo(create remote+push)/removeRepo(delete remote+local)",type:"string",demandOption:!0}).option("u",{alias:"userName",default:"mooninlearn",describe:"Name of User",type:"string"}).option("n",{alias:"repoName",describe:"NameOfRepository",type:"string"}).option("d",{alias:"description",describe:"Description For Repository",type:"string"}).argv,g=a(u.userName??"");g.userName=u.userName??"",console.log(`#### git account: ${JSON.stringify(g)}`);let y=new r({auth:g.token}),f=(e=u.repoName??"",(o=k()).split("/").pop()!==e&&(o+=`/${e}`),o??"");switch(u.exec){case"createRemoteRepo":p(y,{name:u.repoName??"",description:u.description??""});break;case"createRemoteRepoEmpty":t(y,{name:u.repoName??"",description:u.description??""});break;case"deleteRemoteRepo":m(y,{name:u.repoName??""},g);break;case"setLocalConfig":s({name:u.repoName??"",description:u.description??""},g,f);break;case"cloneRepo":n({name:u.repoName??"",description:u.description??""},g,f);break;case"initLocalRepo":c({name:u.repoName??"",description:u.description??""},g,f);break;case"initRepo":d(y,{name:u.repoName??"",description:u.description??""},g,f);break;case"pushRepo":N({name:u.repoName??"",description:u.description??""},g,f);break;case"copyRepo":l({name:u.repoName??"",description:u.description??"description"},g,f);break;case"makeRepo":R(y,{name:u.repoName??"",description:u.description??""},g,f);break;case"removeRepo":b(y,{name:u.repoName??""},g,f)}