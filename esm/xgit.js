#!/usr/bin/env node
import{Octokit as e}from"@octokit/rest";import o from"yargs";import{findGithubAccount as r,createRemoteRepo as a,initRepo as i,deleteRemoteRepo as t,copyRepo as p,makeRepo as s,removeRepo as n}from"./git.js";import{getCurrentDir as c}from"./cli.js";let m=o.usage("Usage: -u <url> -s <keyword>").option("e",{alias:"exec",default:"copyRepo",describe:"exec command copyRepo(clone+local config)/makeRepo(create remote+push)/removeRepo(delete remote+local)",type:"string",demandOption:!0}).option("u",{alias:"userName",default:"mooninlearn",describe:"Name of User",type:"string"}).option("n",{alias:"repoName",describe:"NameOfRepository",type:"string"}).option("d",{alias:"description",describe:"Description For Repository",type:"string"}).argv,d=r(m.userName??"");d.userName=m.userName??"",console.log(`@@@@@@@@@@@@@@@@@account: ${d}`);let l=new e({auth:d.token}),u=`${c()}/${m.repoName??""}`;switch(m.exec){case"initRepo":i(l,{name:m.repoName??"",description:m.description??""},d,u);break;case"createRemoteRepo":a(l,{name:m.repoName??"",description:m.description??""});break;case"deleteRemoteRepo":t(l,{name:m.repoName??""},d);break;case"copyRepo":p({name:m.repoName??"",description:m.description??"description"},d,u);break;case"makeRepo":s(l,{name:m.repoName??"",description:m.description??""},d,u);break;case"removeRepo":n(l,{name:m.repoName??""},d,u)}