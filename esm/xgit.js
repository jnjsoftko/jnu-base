#!/usr/bin/env node
var e;let o;import{Octokit as r}from"@octokit/rest";import i from"yargs";import{findGithubAccount as a,createRemoteRepo as t,initRepo as p,deleteRemoteRepo as s,copyRepo as n,makeRepo as c,removeRepo as m}from"./git.js";import{getCurrentDir as d}from"./cli.js";let l=i.usage("Usage: -u <url> -s <keyword>").option("e",{alias:"exec",default:"copyRepo",describe:"exec command copyRepo(clone+local config)/makeRepo(create remote+push)/removeRepo(delete remote+local)",type:"string",demandOption:!0}).option("u",{alias:"userName",default:"mooninlearn",describe:"Name of User",type:"string"}).option("n",{alias:"repoName",describe:"NameOfRepository",type:"string"}).option("d",{alias:"description",describe:"Description For Repository",type:"string"}).argv,N=a(l.userName??"");N.userName=l.userName??"",console.log(`#### git account: ${JSON.stringify(N)}`);let u=new r({auth:N.token}),R=(e=l.repoName??"",(o=d()).split("/").pop()!==e&&(o+=`/${e}`),o??"");switch(l.exec){case"initRepo":p(u,{name:l.repoName??"",description:l.description??""},N,R);break;case"createRemoteRepo":t(u,{name:l.repoName??"",description:l.description??""});break;case"deleteRemoteRepo":s(u,{name:l.repoName??""},N);break;case"copyRepo":n({name:l.repoName??"",description:l.description??"description"},N,R);break;case"makeRepo":c(u,{name:l.repoName??"",description:l.description??""},N,R);break;case"removeRepo":m(u,{name:l.repoName??""},N,R)}