#!/usr/bin/env node
var e;let o;import{Octokit as r}from"@octokit/rest";import a from"yargs";import{findGithubAccount as i,createRemoteRepo as p,createRemoteRepoEmpty as t,setLocalConfig as s,cloneRepo as n,initLocalRepo as c,deleteRemoteRepo as m,copyRepo as d,pushRepo as l,makeRepo as N,removeRepo as R}from"./git.js";import{getCurrentDir as u}from"./cli.js";let b=a.usage("Usage: -u <url> -s <keyword>").option("e",{alias:"exec",default:"copyRepo",describe:"exec command copyRepo(clone+local config)/makeRepo(create remote+push)/removeRepo(delete remote+local)",type:"string",demandOption:!0}).option("u",{alias:"userName",default:"mooninlearn",describe:"Name of User",type:"string"}).option("n",{alias:"repoName",describe:"NameOfRepository",type:"string"}).option("d",{alias:"description",describe:"Description For Repository",type:"string"}).argv,g=i(b.userName??"");g.userName=b.userName??"",console.log(`#### git account: ${JSON.stringify(g)}`);let k=new r({auth:g.token}),y=(e=b.repoName??"",(o=u()).split("/").pop()!==e&&(o+=`/${e}`),o??"");switch(b.exec){case"createRemoteRepo":p(k,{name:b.repoName??"",description:b.description??""});break;case"createRemoteRepoEmpty":t(k,{name:b.repoName??"",description:b.description??""});break;case"deleteRemoteRepo":m(k,{name:b.repoName??""},g);break;case"setLocalConfig":s({name:b.repoName??"",description:b.description??""},g,y);break;case"cloneRepo":n({name:b.repoName??"",description:b.description??""},g,y);break;case"initLocalRepo":case"initRepo":c({name:b.repoName??"",description:b.description??""},g,y);break;case"pushRepo":l({name:b.repoName??"",description:b.description??""},g,y);break;case"copyRepo":d({name:b.repoName??"",description:b.description??"description"},g,y);break;case"makeRepo":N(k,{name:b.repoName??"",description:b.description??""},g,y);break;case"removeRepo":R(k,{name:b.repoName??""},g,y)}