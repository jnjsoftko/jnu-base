#!/usr/bin/env node
import{findGithubAccount as e,createRepo as o,initRepo as i,copyRepo as a,makeRepo as p,deleteRepo as r}from"./git";import{Octokit as t}from"@octokit/rest";import n from"yargs";let s=n.usage("Usage: -u <url> -s <keyword>").option("u",{alias:"userName",default:"mooninlearn",describe:"Name of User",type:"string",demandOption:!0}).option("e",{alias:"exec",choices:["createRepo","initRepo","copyRepo","emptyRepo","pushRepo","deleteRepo","makeRepo"],default:"createRepo",describe:"exec command createRepo/inintRepo(create+clone+config)/copyRepo(clone+config)/deleteRepo",type:"string",demandOption:!0}).option("n",{alias:"repoName",describe:"NameOfRepository",type:"string",demandOption:!0}).option("d",{alias:"description",describe:"Description For Repository",type:"string"}).argv,c=e(s.userName),m=new t({auth:c.token});switch(s.exec){case"initRepo":i({name:s.repoName,description:s.description},s.userName,c,m);break;case"createRepo":o(m,{name:s.repoName,description:s.description});break;case"copyRepo":a({name:s.repoName,description:s.description},s.userName,c);break;case"emptyRepo":o(m,{name:s.repoName,description:s.description,auto_init:!1,license_template:void 0});break;case"makeRepo":p({name:s.repoName,description:s.description},s.userName,c,m);break;case"deleteRepo":r(m,s.userName,{name:s.repoName})}