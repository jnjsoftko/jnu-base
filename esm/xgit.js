#!/usr/bin/env node
var e;let o;import{Octokit as r}from"@octokit/rest";import a from"yargs";import{findGithubAccount as i,createRemoteRepo as t,createRemoteRepoEmpty as p,setLocalConfig as s,initLocalRepo as n,deleteRemoteRepo as c,copyRepo as m,pushRepo as d,makeRepo as l,removeRepo as N}from"./git.js";import{getCurrentDir as R}from"./cli.js";let u=a.usage("Usage: -u <url> -s <keyword>").option("e",{alias:"exec",default:"copyRepo",describe:"exec command copyRepo(clone+local config)/makeRepo(create remote+push)/removeRepo(delete remote+local)",type:"string",demandOption:!0}).option("u",{alias:"userName",default:"mooninlearn",describe:"Name of User",type:"string"}).option("n",{alias:"repoName",describe:"NameOfRepository",type:"string"}).option("d",{alias:"description",describe:"Description For Repository",type:"string"}).argv,g=i(u.userName??"");g.userName=u.userName??"",console.log(`#### git account: ${JSON.stringify(g)}`);let b=new r({auth:g.token}),k=(e=u.repoName??"",(o=R()).split("/").pop()!==e&&(o+=`/${e}`),o??"");switch(u.exec){case"createRemoteRepo":t(b,{name:u.repoName??"",description:u.description??""});break;case"createRemoteRepoEmpty":p(b,{name:u.repoName??"",description:u.description??""});break;case"deleteRemoteRepo":c(b,{name:u.repoName??""},g);break;case"setLocalConfig":s({name:u.repoName??"",description:u.description??""},g,k);break;case"initLocalRepo":case"initRepo":n({name:u.repoName??"",description:u.description??""},g,k);break;case"pushRepo":d({name:u.repoName??"",description:u.description??""},g,k);break;case"copyRepo":m({name:u.repoName??"",description:u.description??"description"},g,k);break;case"makeRepo":l(b,{name:u.repoName??"",description:u.description??""},g,k);break;case"removeRepo":N(b,{name:u.repoName??""},g,k)}