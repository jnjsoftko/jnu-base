{"version":3,"sources":["../src/cli.ts"],"sourcesContent":["import { execSync, ExecSyncOptionsWithStringEncoding } from 'child_process';\nimport Path from 'path';\nimport { sleep } from './basic.js';\nimport {\n  composeHangul,\n  makeDir,\n  copyDir,\n  loadJson,\n  saveJson,\n  loadFile,\n  saveFile,\n  findFiles,\n  findFolders,\n  deleteFilesInFolder,\n  renameFilesInFolder,\n  substituteInFile,\n} from './builtin.js';\nimport { findGithubAccount } from './git.js';\nimport type { ExecResult, ExecResults, CliOptions } from './types.js';\nimport fs from 'fs';\n\n// & Variables AREA\n// &---------------------------------------------------------------------------\nconst TEMPLATES_ROOT = `${process.env.DEV_CONFIG_ROOT}/Templates` ?? 'C:/JnJ-soft/Developments/Templates';\nconst PLATFORM =\n  process.platform === 'win32'\n    ? 'win'\n    : process.platform === 'darwin'\n    ? 'mac'\n    : process.platform === 'linux'\n    ? 'linux'\n    : process.platform;\n\n// Windows 실행 옵션에 코드페이지 변경 명령 추가\nconst execOptions: ExecSyncOptionsWithStringEncoding = {\n  encoding: 'utf8',\n  shell:\n    process.platform === 'win32'\n      ? 'cmd.exe /d /s /c chcp 65001>nul &&' // UTF-8 코드페이지 설정\n      : '/bin/sh',\n};\n\n// & Functions AREA\n// &---------------------------------------------------------------------------\n\n// * Command Execution Functions\n/**\n * 단일 명령어 실행\n * @param cmd 실행할 명령어\n * @returns 명령어 실행 결과\n *\n * @example\n * ```ts\n * exec('ls -la') // 디렉토리 목록 출력\n * exec('echo \"Hello\"') // 'Hello'\n * exec('pwd') // 현재 작업 디렉토리 경로\n * ```\n */\nconst exec = (cmd: string): ExecResult => {\n  const result = execSync(cmd, { encoding: 'utf8' });\n  return result ? result.toString().trim() : '';\n};\n\n/**\n * 여러 명령어 순차 실행\n * @param cmds 실행할 명령어 배열\n * @returns 각 명령어의 실행 결과 배열\n *\n * @example\n * ```ts\n * exe(['pwd', 'ls -la']) // [현재 경로, 디렉토리 목록]\n * exe(['echo \"Hello\"', 'echo \"World\"']) // ['Hello', 'World']\n * ```\n */\nconst exe = (cmds: string[]): ExecResults => {\n  const results: string[] = [];\n  cmds.forEach((cmd) => results.push(exec(cmd)));\n  return results;\n};\n\n/**\n * 현재 디렉토리 경로 반환\n */\nconst getCurrentDir = (): string => {\n  switch (PLATFORM) {\n    case 'win':\n      return execSync('cd', execOptions).toString().trim().replace(/\\\\/g, '/');\n    default:\n      return execSync('pwd', execOptions).toString().trim();\n  }\n};\n\n/**\n * 현재 디렉토리의 부모 디렉토리 경로 반환\n */\nconst getParentDir = (): string => {\n  switch (PLATFORM) {\n    case 'win':\n      return Path.dirname(execSync('cd', execOptions).toString().trim().replace(/\\\\/g, '/'));\n    default:\n      return Path.dirname(execSync('pwd', execOptions).toString().trim());\n  }\n};\n\n\n// * Main Functions\n// &---------------------------------------------------------------------------\n/**\n * TypeScript + SWC + NPM 프로젝트 초기화\n */\nconst initTsSwcNpm = (options: any) => {\n  const account = findGithubAccount(options.userName ?? '');\n  const parentDir = getParentDir();\n  const currentDir = getCurrentDir();\n\n  let cmd = '';\n\n  if (PLATFORM === 'win') {\n    cmd = `xcopy \"${TEMPLATES_ROOT}\\\\ts-swc-npm\" \"${options.repoName}\\\\\" /E /I /H /Y`;\n    execSync(cmd, execOptions);\n  } else {\n    cmd = `cp -r ${TEMPLATES_ROOT}/ts-swc-npm ${options.repoName}`;\n    execSync(cmd, execOptions);\n  }\n\n  substituteInFile(`${options.repoName}/package.json`, {\n    '{{name}}': options.repoName ?? '',\n    '{{author}}': `${account.fullName} <${account.email}>`,\n    '{{description}}': options.description ?? '',\n  });\n\n  substituteInFile(`${options.repoName}/README.md`, {\n    '{{name}}': options.repoName ?? '',\n    '{{project-name}}': options.repoName ?? '',\n    '{{author}}': `${account.fullName} <${account.email}>`,\n    '{{github-id}}': options.userName ?? '',\n    '{{description}}': options.description || '',\n    '{{parent-dir}}': parentDir,\n    '{{current-dir}}': currentDir,\n  });\n\n  substituteInFile(`${options.repoName}/docs/workflow.md`, {\n    '{{name}}': options.repoName ?? '',\n    '{{project-name}}': options.repoName ?? '',\n    '{{github-id}}': options.userName ?? '',\n    '{{description}}': options.description || '',\n    '{{parent-dir}}': parentDir,\n    '{{current-dir}}': currentDir,\n  });\n\n  cmd = `cd ${currentDir}/${options.repoName} && npm install`;\n  console.log(cmd);\n  execSync(cmd, execOptions);\n  cmd = `cd ${currentDir}/${options.repoName} && xgit -e makeRepo -u ${options.userName} -n ${options.repoName} -d \"${options.description}\"`;\n  console.log(cmd);\n  execSync(cmd, execOptions);\n};\n\n/**\n * 앱 제거 (로컬 + 원격 저장소)\n */\nconst removeApp = (options: any) => {\n  execSync(`xgit -e deleteRemoteRepo -u ${options.userName} -n ${options.repoName}`, execOptions);\n  if (PLATFORM === 'win') {\n    execSync(`rmdir /s /q ${options.repoName}`, execOptions);\n  } else {\n    execSync(`rm -rf ${options.repoName}`, execOptions);\n  }\n};\n\n/**\n * 템플릿 기반 앱 초기화\n */\nconst initApp = (options: any) => {\n  const {template, repoName, userName, description} = options;\n\n  switch (template) {\n    case 'node-simple':\n      break;\n    case 'ts-swc-npm':\n      initTsSwcNpm(options);\n      break;\n    case 'python-pipenv':\n      break;\n    case 'flutter':\n      break;\n  }\n  return options;\n};\n\n\n/**\n * 로컬 프로젝트 압축\n */\nconst zip = (folderPath: string, excluded: string) => {\n  try {\n    // 절대 경로로 변환\n    const absolutePath = Path.resolve(folderPath);\n    // 마지막 폴더명 추출\n    const folderName = Path.basename(absolutePath);\n    // 부모 디렉토리 경로\n    const parentDir = Path.dirname(absolutePath);\n    // 현재 디렉토리를 저장\n    const currentDir = process.cwd();\n\n    switch (PLATFORM) {\n      case 'win':\n        try {\n          // 부모 디렉토리로 이동\n          process.chdir(parentDir);\n\n          // 1. 임시 디렉토리 생성 (상대 경로 사용)\n          const tempDir = `${folderName}_temp`;\n          execSync(`xcopy \"${folderName}\" \"${tempDir}\\\\\" /E /I /H /Y`, execOptions);\n\n          // 2. 제외할 파일/폴더 삭제\n          const excludedItems = excluded\n            ? excluded.split(',')\n            : ['node_modules', 'package-lock.json', 'package.json'];\n\n          for (const item of excludedItems) {\n            const itemPath = `${tempDir}/${item}`;\n            try {\n              if (item.includes('/')) {\n                execSync(`rmdir /s /q \"${itemPath}\"`, execOptions);\n              } else {\n                execSync(`del /q \"${itemPath}\"`, execOptions);\n              }\n            } catch (err) {\n              console.log(`Warning: Could not remove ${item}`);\n            }\n          }\n\n          // 3. 압축 (상대 경로 사용)\n          execSync(\n            `powershell -Command \"Compress-Archive -Path '${tempDir}/*' -DestinationPath '${folderName}.zip' -Force\"`,\n            execOptions\n          );\n\n          // 4. 임시 디렉토리 삭제\n          execSync(`rmdir /s /q \"${tempDir}\"`, execOptions);\n        } catch (error) {\n          console.error('Error during zip operation:', error);\n          throw error;\n        } finally {\n          // 원래 디렉토리로 복귀\n          process.chdir(currentDir);\n        }\n        break;\n\n      default:\n        try {\n          // 부모 디렉토리로 이동\n          process.chdir(parentDir);\n\n          const _excluded = excluded\n            ? excluded\n                .split(',')\n                .map((item) => `\"${item}\"`)\n                .join(' ')\n            : '\"*/node_modules/*\" \".git/*\"';\n          \n          // 상대 경로로 압축\n          execSync(`zip -r \"${folderName}.zip\" \"${folderName}\" -x ${_excluded}`, execOptions);\n        } finally {\n          // 원래 디렉토리로 복귀\n          process.chdir(currentDir);\n        }\n        break;\n    }\n\n    return {folderPath, excluded};\n  } catch (error) {\n    console.error('Error in zip function:', error);\n    throw error;\n  }\n};\n\n/**\n * 디렉토리 내에 있는 모든 압축 파일 해제(zip 파일 이름의 폴더에 압축 해제)\n * @param folderPath 압축 파일이 있는 폴더 경로\n * @example\n * ```ts\n * // 현재 폴더의 모든 zip 파일을 압축 해제\n * unzip('./');\n * ```\n */\nconst unzip = (folderPath: string, excluded: string = '__MACOSX/,node_modules/,.DS_Store,.git/'): string => {\n  // 각 zip 파일에 대해 처리\n  const currentDir = getCurrentDir();\n  const extractPaths: string[] = [];\n  for (const zipPath of findFiles(folderPath, '*.zip')) {\n    try {\n      // * 하위 디렉토리 반영으로 변경???\n      const extractPath = `${currentDir}/_unzip/${Path.parse(zipPath).name}`;\n      console.log(`## extractPath: ${extractPath}`);\n      makeDir(extractPath);\n\n      // 운영체제에 따른 명령어 설정\n      let command: string;\n      if (process.platform === 'win32') {\n        // Windows\n        command = `powershell -command \"Expand-Archive -Path '${zipPath}' -DestinationPath '${extractPath}' -Force\"`;\n        // 압축 해제 후 제외할 파일/폴더 삭제\n        const excludedItems = excluded.split(',').map(item => item.trim());\n        for (const item of excludedItems) {\n          const itemPath = Path.join(extractPath, item.replace('/', ''));\n          if (item.endsWith('/')) {\n            execSync(`if exist \"${itemPath}\" rmdir /s /q \"${itemPath}\"`, execOptions);\n          } else {\n            execSync(`if exist \"${itemPath}\" del /q \"${itemPath}\"`, execOptions);\n          }\n        }\n      } else {\n        // macOS, Linux - 불필요한 파일/폴더 제외\n        const excludeList = excluded\n          .split(',')\n          .map(item => `\"${item.trim()}\"`)\n          .join(' ');\n        command = `unzip -o \"${zipPath}\" -d \"${extractPath}\" -x ${excludeList}`;\n      }\n\n      // 압축 해제 실행\n      execSync(command);\n      console.log(`압축 해제 완료: ${zipPath} -> ${extractPath}`);\n      const subFolders = findFolders(extractPath).filter(folder => !folder.includes('__MACOSX'));\n      console.log(`### subFolders: ${subFolders}, subFolders.length: ${subFolders.length}, ${subFolders[0]}`);\n      if (subFolders.length === 1 && subFolders[0].replace(extractPath, '').includes(Path.parse(zipPath).name)) {\n        console.log(`### 중복 폴더 처리 필요: ${subFolders}`);\n        \n        // 하위 폴더의 모든 파일과 폴더를 상위 폴더로 이동\n        const subItems = fs.readdirSync(subFolders[0]);\n        for (const item of subItems) {\n          const srcPath = Path.join(subFolders[0], item);\n          const destPath = Path.join(extractPath, item);\n          if (process.platform === 'win32') {\n            execSync(`move \"${srcPath}\" \"${destPath}\"`, execOptions);\n          } else {\n            execSync(`mv \"${srcPath}\" \"${destPath}\"`, execOptions);\n          }\n        }\n        \n        // 빈 하위 폴더 삭제\n        if (process.platform === 'win32') {\n          execSync(`rmdir /s /q \"${subFolders[0]}\"`, execOptions);\n        } else {\n          execSync(`rm -rf \"${subFolders[0]}\"`, execOptions);\n        }\n      }\n\n      extractPaths.push(extractPath);\n    } catch (err: any) {\n      console.error(`'${zipPath}' 압축 해제 중 오류 발생:`, err.message);\n    }\n  }\n  deleteFilesInFolder(currentDir, '__MACOSX/', true);\n  return extractPaths.join(',');\n};\n\n/**\n * 프로젝트 구조 분석\n */\nconst tree = (excluded: string): string => {\n  switch (PLATFORM) {\n    case 'win':\n      const excludedWin = excluded.split(',').join('|') || 'node_modules|dist|_backups|_drafts|types|docs';\n\n      try {\n        // PowerShell 실행 정책 우회 및 단순화된 명령어\n        const cmd = `powershell -NoProfile -ExecutionPolicy Bypass -Command \"$OutputEncoding = [Console]::OutputEncoding = [Text.Encoding]::UTF8; tree /F /A | Select-String -NotMatch '${excludedWin}'\"`;\n        console.log('Command: ', cmd);\n\n        const result = execSync(cmd, {\n          encoding: 'utf8',\n          stdio: 'pipe',\n        });\n\n        console.log('Result: ', result);\n        if (result) {\n          saveFile('tree.txt', result, { overwrite: true, newFile: false, encoding: 'utf8' });\n        }\n\n        return result || '';\n      } catch (error) {\n        console.error('Error executing tree command:', error);\n        return '';\n      }\n\n    default:\n      const _excluded = excluded\n        ? `\"${excluded.split(',').join('|')}\"`\n        : '\"node_modules|dist|_backups|_drafts|types|docs\"';\n\n      const cmd = `tree -I ${_excluded} --dirsfirst -L 3`;\n      try {\n        console.log('Command: ', cmd);\n        const result = execSync(cmd, {\n          encoding: 'utf8',\n          stdio: 'pipe',\n        });\n\n        if (result) {\n          saveFile('tree.txt', result, { overwrite: true, newFile: false });\n        }\n\n        return result || '';\n      } catch (error) {\n        console.error('Error executing tree command:', error);\n        return '';\n      }\n  }\n};\n\n// & Export AREA\n// &---------------------------------------------------------------------------\nexport { TEMPLATES_ROOT, PLATFORM, execOptions, exec, exe, getParentDir, getCurrentDir, initApp, removeApp, zip, tree, unzip };\n\n// & Test AREA\n// &---------------------------------------------------------------------------\n// console.log(exec(\"dir /w\"));\n// console.log(exec(\"powershell -Command \\\"Get-ChildItem | Format-Wide\\\"\"));\n"],"names":["execSync","Path","makeDir","saveFile","findFiles","findFolders","deleteFilesInFolder","substituteInFile","findGithubAccount","fs","TEMPLATES_ROOT","process","env","DEV_CONFIG_ROOT","PLATFORM","platform","execOptions","encoding","shell","exec","cmd","result","toString","trim","exe","cmds","results","forEach","push","getCurrentDir","replace","getParentDir","dirname","initTsSwcNpm","options","account","userName","parentDir","currentDir","repoName","fullName","email","description","console","log","removeApp","initApp","template","zip","folderPath","excluded","absolutePath","resolve","folderName","basename","cwd","chdir","tempDir","excludedItems","split","item","itemPath","includes","err","error","_excluded","map","join","unzip","extractPaths","zipPath","extractPath","parse","name","command","endsWith","excludeList","subFolders","filter","folder","length","subItems","readdirSync","srcPath","destPath","message","tree","excludedWin","stdio","overwrite","newFile"],"mappings":"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"}